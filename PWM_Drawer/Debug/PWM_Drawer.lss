
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  00002518  000025ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001b2  008001b2  000026fe  2**0
                  ALLOC
  3 .stab         00001c38  00000000  00000000  00002700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe4  00000000  00000000  00004338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000054bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000056ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a018  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Std_Types.h"
#include <util/delay.h>

u16 X=0,Y=0, Z=0;
int main()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	62 97       	sbiw	r28, 0x12	; 18
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	Lcd_Init();
      a6:	0e 94 a6 02 	call	0x54c	; 0x54c <Lcd_Init>
	Lcd_Start();
      aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Lcd_Start>
	Dio_ConfigChannel(DIO_PORTD, DIO_PIN6, INPUT);
      ae:	83 e0       	ldi	r24, 0x03	; 3
      b0:	66 e0       	ldi	r22, 0x06	; 6
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>
	u16 ICR = ((TIMER1_ICR1H_REG <<8) | (TIMER1_ICR1L_REG));
      b8:	e7 e4       	ldi	r30, 0x47	; 71
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	88 2f       	mov	r24, r24
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	38 2f       	mov	r19, r24
      c4:	22 27       	eor	r18, r18
      c6:	e6 e4       	ldi	r30, 0x46	; 70
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	88 2f       	mov	r24, r24
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	82 2b       	or	r24, r18
      d2:	93 2b       	or	r25, r19
      d4:	9a 8b       	std	Y+18, r25	; 0x12
      d6:	89 8b       	std	Y+17, r24	; 0x11
	u16 TCNT= ((TIMER1_TCNT1H_REG<<8) | (TIMER1_TCNT1L_REG));
      d8:	ed e4       	ldi	r30, 0x4D	; 77
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	88 2f       	mov	r24, r24
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	38 2f       	mov	r19, r24
      e4:	22 27       	eor	r18, r18
      e6:	ec e4       	ldi	r30, 0x4C	; 76
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	88 2f       	mov	r24, r24
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	82 2b       	or	r24, r18
      f2:	93 2b       	or	r25, r19
      f4:	98 8b       	std	Y+16, r25	; 0x10
      f6:	8f 87       	std	Y+15, r24	; 0x0f
	SET_BIT(TIMER0_TIFR_REG, 5);	// Clear input capture flag
      f8:	a8 e5       	ldi	r26, 0x58	; 88
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e8 e5       	ldi	r30, 0x58	; 88
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	80 62       	ori	r24, 0x20	; 32
     104:	8c 93       	st	X, r24
	while(1){
		TCNT = 0;
     106:	18 8a       	std	Y+16, r1	; 0x10
     108:	1f 86       	std	Y+15, r1	; 0x0f
		TIMER1_TCCR1A_REG = 0;
     10a:	ef e4       	ldi	r30, 0x4F	; 79
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	10 82       	st	Z, r1
		// 1--> Capture Rising Edge
		// 0100 0001
		TIMER1_TCCR1B_REG = 0x41;	// Capture in Rising, No Prescaler
     110:	ee e4       	ldi	r30, 0x4E	; 78
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	81 e4       	ldi	r24, 0x41	; 65
     116:	80 83       	st	Z, r24
		while(!(CHK_BIT(TIMER0_TIFR_REG, 5)));
     118:	a8 e5       	ldi	r26, 0x58	; 88
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e8 e5       	ldi	r30, 0x58	; 88
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 72       	andi	r24, 0x20	; 32
     124:	8c 93       	st	X, r24
     126:	8c 91       	ld	r24, X
     128:	88 23       	and	r24, r24
     12a:	b1 f3       	breq	.-20     	; 0x118 <main+0x86>
		X = ICR;		// Store The First Value
     12c:	89 89       	ldd	r24, Y+17	; 0x11
     12e:	9a 89       	ldd	r25, Y+18	; 0x12
     130:	90 93 b3 01 	sts	0x01B3, r25
     134:	80 93 b2 01 	sts	0x01B2, r24
		SET_BIT(TIMER0_TIFR_REG, 5);
     138:	a8 e5       	ldi	r26, 0x58	; 88
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	e8 e5       	ldi	r30, 0x58	; 88
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 62       	ori	r24, 0x20	; 32
     144:	8c 93       	st	X, r24

		// 0--> Capture Falling Edge
		// 0000 0001
		TIMER1_TCCR1B_REG = 0x01;	// Capture in Falling, No  Prescaler
     146:	ee e4       	ldi	r30, 0x4E	; 78
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 83       	st	Z, r24
		while(!(CHK_BIT(TIMER0_TIFR_REG, 5)));
     14e:	a8 e5       	ldi	r26, 0x58	; 88
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	e8 e5       	ldi	r30, 0x58	; 88
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	80 72       	andi	r24, 0x20	; 32
     15a:	8c 93       	st	X, r24
     15c:	8c 91       	ld	r24, X
     15e:	88 23       	and	r24, r24
     160:	b1 f3       	breq	.-20     	; 0x14e <main+0xbc>
		Y = ICR;		// Store The second Value
     162:	89 89       	ldd	r24, Y+17	; 0x11
     164:	9a 89       	ldd	r25, Y+18	; 0x12
     166:	90 93 b5 01 	sts	0x01B5, r25
     16a:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(TIMER0_TIFR_REG, 5);
     16e:	a8 e5       	ldi	r26, 0x58	; 88
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e8 e5       	ldi	r30, 0x58	; 88
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	80 62       	ori	r24, 0x20	; 32
     17a:	8c 93       	st	X, r24

		// 1--> Capture Rising Edge
		// 0100 0001
		TIMER1_TCCR1B_REG = 0x41;	// Capture in Rising, No Prescaler
     17c:	ee e4       	ldi	r30, 0x4E	; 78
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	81 e4       	ldi	r24, 0x41	; 65
     182:	80 83       	st	Z, r24
		while(!(CHK_BIT(TIMER0_TIFR_REG, 5)));
     184:	a8 e5       	ldi	r26, 0x58	; 88
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	e8 e5       	ldi	r30, 0x58	; 88
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	80 72       	andi	r24, 0x20	; 32
     190:	8c 93       	st	X, r24
     192:	8c 91       	ld	r24, X
     194:	88 23       	and	r24, r24
     196:	b1 f3       	breq	.-20     	; 0x184 <main+0xf2>
		Z = ICR;		// Store The First Value
     198:	89 89       	ldd	r24, Y+17	; 0x11
     19a:	9a 89       	ldd	r25, Y+18	; 0x12
     19c:	90 93 b7 01 	sts	0x01B7, r25
     1a0:	80 93 b6 01 	sts	0x01B6, r24
		SET_BIT(TIMER0_TIFR_REG, 5);
     1a4:	a8 e5       	ldi	r26, 0x58	; 88
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e8 e5       	ldi	r30, 0x58	; 88
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	8c 93       	st	X, r24

		// Stop The Timer , 0000 0000
		TIMER1_TCCR1B_REG = 0;
     1b2:	ee e4       	ldi	r30, 0x4E	; 78
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	10 82       	st	Z, r1
		Update_Data();
     1b8:	0e 94 75 01 	call	0x2ea	; 0x2ea <Update_Data>
		PWM_Drawer();
     1bc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <PWM_Drawer>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e8       	ldi	r25, 0x80	; 128
     1c4:	ab eb       	ldi	r26, 0xBB	; 187
     1c6:	b4 e4       	ldi	r27, 0x44	; 68
     1c8:	8b 87       	std	Y+11, r24	; 0x0b
     1ca:	9c 87       	std	Y+12, r25	; 0x0c
     1cc:	ad 87       	std	Y+13, r26	; 0x0d
     1ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1d0:	6b 85       	ldd	r22, Y+11	; 0x0b
     1d2:	7c 85       	ldd	r23, Y+12	; 0x0c
     1d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	4a e7       	ldi	r20, 0x7A	; 122
     1de:	55 e4       	ldi	r21, 0x45	; 69
     1e0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	8f 83       	std	Y+7, r24	; 0x07
     1ea:	98 87       	std	Y+8, r25	; 0x08
     1ec:	a9 87       	std	Y+9, r26	; 0x09
     1ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     1f0:	6f 81       	ldd	r22, Y+7	; 0x07
     1f2:	78 85       	ldd	r23, Y+8	; 0x08
     1f4:	89 85       	ldd	r24, Y+9	; 0x09
     1f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e8       	ldi	r20, 0x80	; 128
     1fe:	5f e3       	ldi	r21, 0x3F	; 63
     200:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     204:	88 23       	and	r24, r24
     206:	2c f4       	brge	.+10     	; 0x212 <main+0x180>
		__ticks = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	9e 83       	std	Y+6, r25	; 0x06
     20e:	8d 83       	std	Y+5, r24	; 0x05
     210:	3f c0       	rjmp	.+126    	; 0x290 <main+0x1fe>
	else if (__tmp > 65535)
     212:	6f 81       	ldd	r22, Y+7	; 0x07
     214:	78 85       	ldd	r23, Y+8	; 0x08
     216:	89 85       	ldd	r24, Y+9	; 0x09
     218:	9a 85       	ldd	r25, Y+10	; 0x0a
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	3f ef       	ldi	r19, 0xFF	; 255
     21e:	4f e7       	ldi	r20, 0x7F	; 127
     220:	57 e4       	ldi	r21, 0x47	; 71
     222:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     226:	18 16       	cp	r1, r24
     228:	4c f5       	brge	.+82     	; 0x27c <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     22a:	6b 85       	ldd	r22, Y+11	; 0x0b
     22c:	7c 85       	ldd	r23, Y+12	; 0x0c
     22e:	8d 85       	ldd	r24, Y+13	; 0x0d
     230:	9e 85       	ldd	r25, Y+14	; 0x0e
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e2       	ldi	r20, 0x20	; 32
     238:	51 e4       	ldi	r21, 0x41	; 65
     23a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	9e 83       	std	Y+6, r25	; 0x06
     250:	8d 83       	std	Y+5, r24	; 0x05
     252:	0f c0       	rjmp	.+30     	; 0x272 <main+0x1e0>
     254:	80 e9       	ldi	r24, 0x90	; 144
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	9c 83       	std	Y+4, r25	; 0x04
     25a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25c:	8b 81       	ldd	r24, Y+3	; 0x03
     25e:	9c 81       	ldd	r25, Y+4	; 0x04
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <main+0x1ce>
     264:	9c 83       	std	Y+4, r25	; 0x04
     266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     268:	8d 81       	ldd	r24, Y+5	; 0x05
     26a:	9e 81       	ldd	r25, Y+6	; 0x06
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	9e 83       	std	Y+6, r25	; 0x06
     270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     272:	8d 81       	ldd	r24, Y+5	; 0x05
     274:	9e 81       	ldd	r25, Y+6	; 0x06
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	69 f7       	brne	.-38     	; 0x254 <main+0x1c2>
     27a:	45 cf       	rjmp	.-374    	; 0x106 <main+0x74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     27c:	6f 81       	ldd	r22, Y+7	; 0x07
     27e:	78 85       	ldd	r23, Y+8	; 0x08
     280:	89 85       	ldd	r24, Y+9	; 0x09
     282:	9a 85       	ldd	r25, Y+10	; 0x0a
     284:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	9e 83       	std	Y+6, r25	; 0x06
     28e:	8d 83       	std	Y+5, r24	; 0x05
     290:	8d 81       	ldd	r24, Y+5	; 0x05
     292:	9e 81       	ldd	r25, Y+6	; 0x06
     294:	9a 83       	std	Y+2, r25	; 0x02
     296:	89 83       	std	Y+1, r24	; 0x01
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	9a 81       	ldd	r25, Y+2	; 0x02
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x20a>
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	30 cf       	rjmp	.-416    	; 0x106 <main+0x74>

000002a6 <Lcd_Start>:
	}
	return 0;
}

void Lcd_Start()
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	Lcd_Cmd(_LCD_CLEAR);			// For Clear LCD
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
	Lcd_Goto_Row_Column(0, 0);		// Start From Begin
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("F=");
     2bc:	80 e6       	ldi	r24, 0x60	; 96
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 41 06 	call	0xc82	; 0xc82 <Lcd_DisplayStr>
	Lcd_Goto_Row_Column(0, 6);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	66 e0       	ldi	r22, 0x06	; 6
     2c8:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("T=");
     2cc:	83 e6       	ldi	r24, 0x63	; 99
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 41 06 	call	0xc82	; 0xc82 <Lcd_DisplayStr>
	Lcd_Goto_Row_Column(0, 12);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	6c e0       	ldi	r22, 0x0C	; 12
     2d8:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("D=");
     2dc:	86 e6       	ldi	r24, 0x66	; 102
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 41 06 	call	0xc82	; 0xc82 <Lcd_DisplayStr>
}
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	08 95       	ret

000002ea <Update_Data>:

void Update_Data()
{
     2ea:	df 93       	push	r29
     2ec:	cf 93       	push	r28
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <Update_Data+0x6>
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <Update_Data+0x8>
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <Update_Data+0xa>
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
	int timer = Z-X;
     2f8:	20 91 b6 01 	lds	r18, 0x01B6
     2fc:	30 91 b7 01 	lds	r19, 0x01B7
     300:	80 91 b2 01 	lds	r24, 0x01B2
     304:	90 91 b3 01 	lds	r25, 0x01B3
     308:	a9 01       	movw	r20, r18
     30a:	48 1b       	sub	r20, r24
     30c:	59 0b       	sbc	r21, r25
     30e:	ca 01       	movw	r24, r20
     310:	9e 83       	std	Y+6, r25	; 0x06
     312:	8d 83       	std	Y+5, r24	; 0x05
	int freq = (16000000/timer)/1000;			// Calculate frequency
     314:	8d 81       	ldd	r24, Y+5	; 0x05
     316:	9e 81       	ldd	r25, Y+6	; 0x06
     318:	9c 01       	movw	r18, r24
     31a:	44 27       	eor	r20, r20
     31c:	37 fd       	sbrc	r19, 7
     31e:	40 95       	com	r20
     320:	54 2f       	mov	r21, r20
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	9e e3       	ldi	r25, 0x3E	; 62
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 16 12 	call	0x242c	; 0x242c <__divmodsi4>
     332:	da 01       	movw	r26, r20
     334:	c9 01       	movw	r24, r18
     336:	9c 83       	std	Y+4, r25	; 0x04
     338:	8b 83       	std	Y+3, r24	; 0x03
	int dutycycle = (u16)((Y-X)*100)/timer;	// Calculate Duty Cycle
     33a:	20 91 b4 01 	lds	r18, 0x01B4
     33e:	30 91 b5 01 	lds	r19, 0x01B5
     342:	80 91 b2 01 	lds	r24, 0x01B2
     346:	90 91 b3 01 	lds	r25, 0x01B3
     34a:	28 1b       	sub	r18, r24
     34c:	39 0b       	sbc	r19, r25
     34e:	84 e6       	ldi	r24, 0x64	; 100
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	ac 01       	movw	r20, r24
     354:	24 9f       	mul	r18, r20
     356:	c0 01       	movw	r24, r0
     358:	25 9f       	mul	r18, r21
     35a:	90 0d       	add	r25, r0
     35c:	34 9f       	mul	r19, r20
     35e:	90 0d       	add	r25, r0
     360:	11 24       	eor	r1, r1
     362:	2d 81       	ldd	r18, Y+5	; 0x05
     364:	3e 81       	ldd	r19, Y+6	; 0x06
     366:	b9 01       	movw	r22, r18
     368:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     36c:	cb 01       	movw	r24, r22
     36e:	9a 83       	std	Y+2, r25	; 0x02
     370:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Goto_Row_Column(0, 2);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	62 e0       	ldi	r22, 0x02	; 2
     376:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_DisplayNum(freq);
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	9c 81       	ldd	r25, Y+4	; 0x04
     37e:	0e 94 84 06 	call	0xd08	; 0xd08 <Lcd_DisplayNum>
	Lcd_Goto_Row_Column(0, 8);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	68 e0       	ldi	r22, 0x08	; 8
     386:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_DisplayNum(timer);
     38a:	8d 81       	ldd	r24, Y+5	; 0x05
     38c:	9e 81       	ldd	r25, Y+6	; 0x06
     38e:	0e 94 84 06 	call	0xd08	; 0xd08 <Lcd_DisplayNum>
	Lcd_Goto_Row_Column(0, 14);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	6e e0       	ldi	r22, 0x0E	; 14
     396:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_Display2Num(dutycycle);
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	0e 94 0a 07 	call	0xe14	; 0xe14 <Lcd_Display2Num>
}
     3a0:	26 96       	adiw	r28, 0x06	; 6
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	cf 91       	pop	r28
     3ae:	df 91       	pop	r29
     3b0:	08 95       	ret

000003b2 <PWM_Drawer>:

void PWM_Drawer()
{
     3b2:	df 93       	push	r29
     3b4:	cf 93       	push	r28
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	2c 97       	sbiw	r28, 0x0c	; 12
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
	 * 0 --> for Rising  Edge
	 * 1 --> for Rising  Line
	 * 2 --> for Falling Edge
	 * 3 --> for Falling Line
	 */
	int duty = (((Y-X)*100)/(Z-X));
     3c6:	20 91 b4 01 	lds	r18, 0x01B4
     3ca:	30 91 b5 01 	lds	r19, 0x01B5
     3ce:	80 91 b2 01 	lds	r24, 0x01B2
     3d2:	90 91 b3 01 	lds	r25, 0x01B3
     3d6:	28 1b       	sub	r18, r24
     3d8:	39 0b       	sbc	r19, r25
     3da:	84 e6       	ldi	r24, 0x64	; 100
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	28 9f       	mul	r18, r24
     3e0:	a0 01       	movw	r20, r0
     3e2:	29 9f       	mul	r18, r25
     3e4:	50 0d       	add	r21, r0
     3e6:	38 9f       	mul	r19, r24
     3e8:	50 0d       	add	r21, r0
     3ea:	11 24       	eor	r1, r1
     3ec:	20 91 b6 01 	lds	r18, 0x01B6
     3f0:	30 91 b7 01 	lds	r19, 0x01B7
     3f4:	80 91 b2 01 	lds	r24, 0x01B2
     3f8:	90 91 b3 01 	lds	r25, 0x01B3
     3fc:	28 1b       	sub	r18, r24
     3fe:	39 0b       	sbc	r19, r25
     400:	ca 01       	movw	r24, r20
     402:	b9 01       	movw	r22, r18
     404:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     408:	cb 01       	movw	r24, r22
     40a:	9c 87       	std	Y+12, r25	; 0x0c
     40c:	8b 87       	std	Y+11, r24	; 0x0b
	int get_up = (duty*8)/100;
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	9c 85       	ldd	r25, Y+12	; 0x0c
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	24 e6       	ldi	r18, 0x64	; 100
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	b9 01       	movw	r22, r18
     424:	0e 94 03 12 	call	0x2406	; 0x2406 <__divmodhi4>
     428:	cb 01       	movw	r24, r22
     42a:	9a 87       	std	Y+10, r25	; 0x0a
     42c:	89 87       	std	Y+9, r24	; 0x09
	int loop =0;
     42e:	18 86       	std	Y+8, r1	; 0x08
     430:	1f 82       	std	Y+7, r1	; 0x07
	int get_down = 8-get_up;
     432:	28 e0       	ldi	r18, 0x08	; 8
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	9a 85       	ldd	r25, Y+10	; 0x0a
     43a:	a9 01       	movw	r20, r18
     43c:	48 1b       	sub	r20, r24
     43e:	59 0b       	sbc	r21, r25
     440:	ca 01       	movw	r24, r20
     442:	9e 83       	std	Y+6, r25	; 0x06
     444:	8d 83       	std	Y+5, r24	; 0x05
	Lcd_Goto_Row_Column(1, 0);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
     44e:	33 c0       	rjmp	.+102    	; 0x4b6 <PWM_Drawer+0x104>
	while(loop<4){
		Lcd_DisplayChr(0);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
		for(int up=1; up<get_up; up++)
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	9c 83       	std	Y+4, r25	; 0x04
     45c:	8b 83       	std	Y+3, r24	; 0x03
     45e:	08 c0       	rjmp	.+16     	; 0x470 <PWM_Drawer+0xbe>
			Lcd_DisplayChr(1);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	int loop =0;
	int get_down = 8-get_up;
	Lcd_Goto_Row_Column(1, 0);
	while(loop<4){
		Lcd_DisplayChr(0);
		for(int up=1; up<get_up; up++)
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	9c 81       	ldd	r25, Y+4	; 0x04
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	9c 83       	std	Y+4, r25	; 0x04
     46e:	8b 83       	std	Y+3, r24	; 0x03
     470:	2b 81       	ldd	r18, Y+3	; 0x03
     472:	3c 81       	ldd	r19, Y+4	; 0x04
     474:	89 85       	ldd	r24, Y+9	; 0x09
     476:	9a 85       	ldd	r25, Y+10	; 0x0a
     478:	28 17       	cp	r18, r24
     47a:	39 07       	cpc	r19, r25
     47c:	8c f3       	brlt	.-30     	; 0x460 <PWM_Drawer+0xae>
			Lcd_DisplayChr(1);
		Lcd_DisplayChr(2);
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
		for(int down=1; down<get_down; down++)
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	08 c0       	rjmp	.+16     	; 0x49e <PWM_Drawer+0xec>
			Lcd_DisplayChr(3);
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	while(loop<4){
		Lcd_DisplayChr(0);
		for(int up=1; up<get_up; up++)
			Lcd_DisplayChr(1);
		Lcd_DisplayChr(2);
		for(int down=1; down<get_down; down++)
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	29 81       	ldd	r18, Y+1	; 0x01
     4a0:	3a 81       	ldd	r19, Y+2	; 0x02
     4a2:	8d 81       	ldd	r24, Y+5	; 0x05
     4a4:	9e 81       	ldd	r25, Y+6	; 0x06
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	8c f3       	brlt	.-30     	; 0x48e <PWM_Drawer+0xdc>
			Lcd_DisplayChr(3);
		loop++;
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	98 87       	std	Y+8, r25	; 0x08
     4b4:	8f 83       	std	Y+7, r24	; 0x07
	int duty = (((Y-X)*100)/(Z-X));
	int get_up = (duty*8)/100;
	int loop =0;
	int get_down = 8-get_up;
	Lcd_Goto_Row_Column(1, 0);
	while(loop<4){
     4b6:	8f 81       	ldd	r24, Y+7	; 0x07
     4b8:	98 85       	ldd	r25, Y+8	; 0x08
     4ba:	84 30       	cpi	r24, 0x04	; 4
     4bc:	91 05       	cpc	r25, r1
     4be:	44 f2       	brlt	.-112    	; 0x450 <PWM_Drawer+0x9e>
		Lcd_DisplayChr(2);
		for(int down=1; down<get_down; down++)
			Lcd_DisplayChr(3);
		loop++;
	}
}
     4c0:	2c 96       	adiw	r28, 0x0c	; 12
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	cf 91       	pop	r28
     4ce:	df 91       	pop	r29
     4d0:	08 95       	ret

000004d2 <Lcd_WriteCustom>:
 * 			PA7
 * */

extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <Lcd_WriteCustom+0x6>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
     4dc:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
     4de:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     4e0:	19 82       	std	Y+1, r1	; 0x01
     4e2:	2c c0       	rjmp	.+88     	; 0x53c <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	88 2f       	mov	r24, r24
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	08 96       	adiw	r24, 0x08	; 8
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++){
     4fc:	1a 82       	std	Y+2, r1	; 0x02
     4fe:	18 c0       	rjmp	.+48     	; 0x530 <Lcd_WriteCustom+0x5e>
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	48 2f       	mov	r20, r24
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	28 2f       	mov	r18, r24
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	ca 01       	movw	r24, r20
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	fc 01       	movw	r30, r24
     520:	e7 59       	subi	r30, 0x97	; 151
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	80 81       	ld	r24, Z
     526:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++){
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	88 30       	cpi	r24, 0x08	; 8
     534:	28 f3       	brcs	.-54     	; 0x500 <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	88 30       	cpi	r24, 0x08	; 8
     540:	88 f2       	brcs	.-94     	; 0x4e4 <Lcd_WriteCustom+0x12>
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++){
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <Lcd_Init>:

void Lcd_Init(void)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	e4 97       	sbiw	r28, 0x34	; 52
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
	// Configure Data Lines As Output
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	64 e0       	ldi	r22, 0x04	; 4
     564:	41 e0       	ldi	r20, 0x01	; 1
     566:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	65 e0       	ldi	r22, 0x05	; 5
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	66 e0       	ldi	r22, 0x06	; 6
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	67 e0       	ldi	r22, 0x07	; 7
     582:	41 e0       	ldi	r20, 0x01	; 1
     584:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>

	// Configure Control Lines As Output
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	41 e0       	ldi	r20, 0x01	; 1
     58e:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	62 e0       	ldi	r22, 0x02	; 2
     596:	41 e0       	ldi	r20, 0x01	; 1
     598:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	63 e0       	ldi	r22, 0x03	; 3
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	0e 94 c4 07 	call	0xf88	; 0xf88 <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	0e 94 a7 08 	call	0x114e	; 0x114e <Dio_WriteChannel>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	a0 e7       	ldi	r26, 0x70	; 112
     5b6:	b1 e4       	ldi	r27, 0x41	; 65
     5b8:	89 ab       	std	Y+49, r24	; 0x31
     5ba:	9a ab       	std	Y+50, r25	; 0x32
     5bc:	ab ab       	std	Y+51, r26	; 0x33
     5be:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5c0:	69 a9       	ldd	r22, Y+49	; 0x31
     5c2:	7a a9       	ldd	r23, Y+50	; 0x32
     5c4:	8b a9       	ldd	r24, Y+51	; 0x33
     5c6:	9c a9       	ldd	r25, Y+52	; 0x34
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	4a e7       	ldi	r20, 0x7A	; 122
     5ce:	55 e4       	ldi	r21, 0x45	; 69
     5d0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	8d a7       	std	Y+45, r24	; 0x2d
     5da:	9e a7       	std	Y+46, r25	; 0x2e
     5dc:	af a7       	std	Y+47, r26	; 0x2f
     5de:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     5e0:	6d a5       	ldd	r22, Y+45	; 0x2d
     5e2:	7e a5       	ldd	r23, Y+46	; 0x2e
     5e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     5e6:	98 a9       	ldd	r25, Y+48	; 0x30
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	40 e8       	ldi	r20, 0x80	; 128
     5ee:	5f e3       	ldi	r21, 0x3F	; 63
     5f0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     5f4:	88 23       	and	r24, r24
     5f6:	2c f4       	brge	.+10     	; 0x602 <Lcd_Init+0xb6>
		__ticks = 1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	9c a7       	std	Y+44, r25	; 0x2c
     5fe:	8b a7       	std	Y+43, r24	; 0x2b
     600:	3f c0       	rjmp	.+126    	; 0x680 <Lcd_Init+0x134>
	else if (__tmp > 65535)
     602:	6d a5       	ldd	r22, Y+45	; 0x2d
     604:	7e a5       	ldd	r23, Y+46	; 0x2e
     606:	8f a5       	ldd	r24, Y+47	; 0x2f
     608:	98 a9       	ldd	r25, Y+48	; 0x30
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	3f ef       	ldi	r19, 0xFF	; 255
     60e:	4f e7       	ldi	r20, 0x7F	; 127
     610:	57 e4       	ldi	r21, 0x47	; 71
     612:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     616:	18 16       	cp	r1, r24
     618:	4c f5       	brge	.+82     	; 0x66c <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     61a:	69 a9       	ldd	r22, Y+49	; 0x31
     61c:	7a a9       	ldd	r23, Y+50	; 0x32
     61e:	8b a9       	ldd	r24, Y+51	; 0x33
     620:	9c a9       	ldd	r25, Y+52	; 0x34
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e2       	ldi	r20, 0x20	; 32
     628:	51 e4       	ldi	r21, 0x41	; 65
     62a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	9c a7       	std	Y+44, r25	; 0x2c
     640:	8b a7       	std	Y+43, r24	; 0x2b
     642:	0f c0       	rjmp	.+30     	; 0x662 <Lcd_Init+0x116>
     644:	80 e9       	ldi	r24, 0x90	; 144
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	9a a7       	std	Y+42, r25	; 0x2a
     64a:	89 a7       	std	Y+41, r24	; 0x29
     64c:	89 a5       	ldd	r24, Y+41	; 0x29
     64e:	9a a5       	ldd	r25, Y+42	; 0x2a
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <Lcd_Init+0x104>
     654:	9a a7       	std	Y+42, r25	; 0x2a
     656:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     658:	8b a5       	ldd	r24, Y+43	; 0x2b
     65a:	9c a5       	ldd	r25, Y+44	; 0x2c
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	9c a7       	std	Y+44, r25	; 0x2c
     660:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     662:	8b a5       	ldd	r24, Y+43	; 0x2b
     664:	9c a5       	ldd	r25, Y+44	; 0x2c
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	69 f7       	brne	.-38     	; 0x644 <Lcd_Init+0xf8>
     66a:	14 c0       	rjmp	.+40     	; 0x694 <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     66c:	6d a5       	ldd	r22, Y+45	; 0x2d
     66e:	7e a5       	ldd	r23, Y+46	; 0x2e
     670:	8f a5       	ldd	r24, Y+47	; 0x2f
     672:	98 a9       	ldd	r25, Y+48	; 0x30
     674:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	9c a7       	std	Y+44, r25	; 0x2c
     67e:	8b a7       	std	Y+43, r24	; 0x2b
     680:	8b a5       	ldd	r24, Y+43	; 0x2b
     682:	9c a5       	ldd	r25, Y+44	; 0x2c
     684:	98 a7       	std	Y+40, r25	; 0x28
     686:	8f a3       	std	Y+39, r24	; 0x27
     688:	8f a1       	ldd	r24, Y+39	; 0x27
     68a:	98 a5       	ldd	r25, Y+40	; 0x28
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <Lcd_Init+0x140>
     690:	98 a7       	std	Y+40, r25	; 0x28
     692:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a0 ea       	ldi	r26, 0xA0	; 160
     6a0:	b0 e4       	ldi	r27, 0x40	; 64
     6a2:	8b a3       	std	Y+35, r24	; 0x23
     6a4:	9c a3       	std	Y+36, r25	; 0x24
     6a6:	ad a3       	std	Y+37, r26	; 0x25
     6a8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6aa:	6b a1       	ldd	r22, Y+35	; 0x23
     6ac:	7c a1       	ldd	r23, Y+36	; 0x24
     6ae:	8d a1       	ldd	r24, Y+37	; 0x25
     6b0:	9e a1       	ldd	r25, Y+38	; 0x26
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4a e7       	ldi	r20, 0x7A	; 122
     6b8:	55 e4       	ldi	r21, 0x45	; 69
     6ba:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	8f 8f       	std	Y+31, r24	; 0x1f
     6c4:	98 a3       	std	Y+32, r25	; 0x20
     6c6:	a9 a3       	std	Y+33, r26	; 0x21
     6c8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     6ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
     6cc:	78 a1       	ldd	r23, Y+32	; 0x20
     6ce:	89 a1       	ldd	r24, Y+33	; 0x21
     6d0:	9a a1       	ldd	r25, Y+34	; 0x22
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     6de:	88 23       	and	r24, r24
     6e0:	2c f4       	brge	.+10     	; 0x6ec <Lcd_Init+0x1a0>
		__ticks = 1;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9e 8f       	std	Y+30, r25	; 0x1e
     6e8:	8d 8f       	std	Y+29, r24	; 0x1d
     6ea:	3f c0       	rjmp	.+126    	; 0x76a <Lcd_Init+0x21e>
	else if (__tmp > 65535)
     6ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
     6ee:	78 a1       	ldd	r23, Y+32	; 0x20
     6f0:	89 a1       	ldd	r24, Y+33	; 0x21
     6f2:	9a a1       	ldd	r25, Y+34	; 0x22
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	3f ef       	ldi	r19, 0xFF	; 255
     6f8:	4f e7       	ldi	r20, 0x7F	; 127
     6fa:	57 e4       	ldi	r21, 0x47	; 71
     6fc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     700:	18 16       	cp	r1, r24
     702:	4c f5       	brge	.+82     	; 0x756 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     704:	6b a1       	ldd	r22, Y+35	; 0x23
     706:	7c a1       	ldd	r23, Y+36	; 0x24
     708:	8d a1       	ldd	r24, Y+37	; 0x25
     70a:	9e a1       	ldd	r25, Y+38	; 0x26
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e2       	ldi	r20, 0x20	; 32
     712:	51 e4       	ldi	r21, 0x41	; 65
     714:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	bc 01       	movw	r22, r24
     71e:	cd 01       	movw	r24, r26
     720:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	9e 8f       	std	Y+30, r25	; 0x1e
     72a:	8d 8f       	std	Y+29, r24	; 0x1d
     72c:	0f c0       	rjmp	.+30     	; 0x74c <Lcd_Init+0x200>
     72e:	80 e9       	ldi	r24, 0x90	; 144
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9c 8f       	std	Y+28, r25	; 0x1c
     734:	8b 8f       	std	Y+27, r24	; 0x1b
     736:	8b 8d       	ldd	r24, Y+27	; 0x1b
     738:	9c 8d       	ldd	r25, Y+28	; 0x1c
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <Lcd_Init+0x1ee>
     73e:	9c 8f       	std	Y+28, r25	; 0x1c
     740:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     742:	8d 8d       	ldd	r24, Y+29	; 0x1d
     744:	9e 8d       	ldd	r25, Y+30	; 0x1e
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	9e 8f       	std	Y+30, r25	; 0x1e
     74a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     74e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	69 f7       	brne	.-38     	; 0x72e <Lcd_Init+0x1e2>
     754:	14 c0       	rjmp	.+40     	; 0x77e <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	6f 8d       	ldd	r22, Y+31	; 0x1f
     758:	78 a1       	ldd	r23, Y+32	; 0x20
     75a:	89 a1       	ldd	r24, Y+33	; 0x21
     75c:	9a a1       	ldd	r25, Y+34	; 0x22
     75e:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	9e 8f       	std	Y+30, r25	; 0x1e
     768:	8d 8f       	std	Y+29, r24	; 0x1d
     76a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     76c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     76e:	9a 8f       	std	Y+26, r25	; 0x1a
     770:	89 8f       	std	Y+25, r24	; 0x19
     772:	89 8d       	ldd	r24, Y+25	; 0x19
     774:	9a 8d       	ldd	r25, Y+26	; 0x1a
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <Lcd_Init+0x22a>
     77a:	9a 8f       	std	Y+26, r25	; 0x1a
     77c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	a8 ec       	ldi	r26, 0xC8	; 200
     78a:	b2 e4       	ldi	r27, 0x42	; 66
     78c:	8d 8b       	std	Y+21, r24	; 0x15
     78e:	9e 8b       	std	Y+22, r25	; 0x16
     790:	af 8b       	std	Y+23, r26	; 0x17
     792:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     794:	6d 89       	ldd	r22, Y+21	; 0x15
     796:	7e 89       	ldd	r23, Y+22	; 0x16
     798:	8f 89       	ldd	r24, Y+23	; 0x17
     79a:	98 8d       	ldd	r25, Y+24	; 0x18
     79c:	2b ea       	ldi	r18, 0xAB	; 171
     79e:	3a ea       	ldi	r19, 0xAA	; 170
     7a0:	4a ea       	ldi	r20, 0xAA	; 170
     7a2:	50 e4       	ldi	r21, 0x40	; 64
     7a4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	89 8b       	std	Y+17, r24	; 0x11
     7ae:	9a 8b       	std	Y+18, r25	; 0x12
     7b0:	ab 8b       	std	Y+19, r26	; 0x13
     7b2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     7b4:	69 89       	ldd	r22, Y+17	; 0x11
     7b6:	7a 89       	ldd	r23, Y+18	; 0x12
     7b8:	8b 89       	ldd	r24, Y+19	; 0x13
     7ba:	9c 89       	ldd	r25, Y+20	; 0x14
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     7c8:	88 23       	and	r24, r24
     7ca:	1c f4       	brge	.+6      	; 0x7d2 <Lcd_Init+0x286>
		__ticks = 1;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	88 8b       	std	Y+16, r24	; 0x10
     7d0:	91 c0       	rjmp	.+290    	; 0x8f4 <__stack+0x95>
	else if (__tmp > 255)
     7d2:	69 89       	ldd	r22, Y+17	; 0x11
     7d4:	7a 89       	ldd	r23, Y+18	; 0x12
     7d6:	8b 89       	ldd	r24, Y+19	; 0x13
     7d8:	9c 89       	ldd	r25, Y+20	; 0x14
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	4f e7       	ldi	r20, 0x7F	; 127
     7e0:	53 e4       	ldi	r21, 0x43	; 67
     7e2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	0c f0       	brlt	.+2      	; 0x7ec <Lcd_Init+0x2a0>
     7ea:	7b c0       	rjmp	.+246    	; 0x8e2 <__stack+0x83>
	{
		_delay_ms(__us / 1000.0);
     7ec:	6d 89       	ldd	r22, Y+21	; 0x15
     7ee:	7e 89       	ldd	r23, Y+22	; 0x16
     7f0:	8f 89       	ldd	r24, Y+23	; 0x17
     7f2:	98 8d       	ldd	r25, Y+24	; 0x18
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	4a e7       	ldi	r20, 0x7A	; 122
     7fa:	54 e4       	ldi	r21, 0x44	; 68
     7fc:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__divsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	8c 87       	std	Y+12, r24	; 0x0c
     806:	9d 87       	std	Y+13, r25	; 0x0d
     808:	ae 87       	std	Y+14, r26	; 0x0e
     80a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     80c:	6c 85       	ldd	r22, Y+12	; 0x0c
     80e:	7d 85       	ldd	r23, Y+13	; 0x0d
     810:	8e 85       	ldd	r24, Y+14	; 0x0e
     812:	9f 85       	ldd	r25, Y+15	; 0x0f
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	4a e7       	ldi	r20, 0x7A	; 122
     81a:	55 e4       	ldi	r21, 0x45	; 69
     81c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	88 87       	std	Y+8, r24	; 0x08
     826:	99 87       	std	Y+9, r25	; 0x09
     828:	aa 87       	std	Y+10, r26	; 0x0a
     82a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     82c:	68 85       	ldd	r22, Y+8	; 0x08
     82e:	79 85       	ldd	r23, Y+9	; 0x09
     830:	8a 85       	ldd	r24, Y+10	; 0x0a
     832:	9b 85       	ldd	r25, Y+11	; 0x0b
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     840:	88 23       	and	r24, r24
     842:	2c f4       	brge	.+10     	; 0x84e <Lcd_Init+0x302>
		__ticks = 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9f 83       	std	Y+7, r25	; 0x07
     84a:	8e 83       	std	Y+6, r24	; 0x06
     84c:	3f c0       	rjmp	.+126    	; 0x8cc <__stack+0x6d>
	else if (__tmp > 65535)
     84e:	68 85       	ldd	r22, Y+8	; 0x08
     850:	79 85       	ldd	r23, Y+9	; 0x09
     852:	8a 85       	ldd	r24, Y+10	; 0x0a
     854:	9b 85       	ldd	r25, Y+11	; 0x0b
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	3f ef       	ldi	r19, 0xFF	; 255
     85a:	4f e7       	ldi	r20, 0x7F	; 127
     85c:	57 e4       	ldi	r21, 0x47	; 71
     85e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     862:	18 16       	cp	r1, r24
     864:	4c f5       	brge	.+82     	; 0x8b8 <__stack+0x59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	6c 85       	ldd	r22, Y+12	; 0x0c
     868:	7d 85       	ldd	r23, Y+13	; 0x0d
     86a:	8e 85       	ldd	r24, Y+14	; 0x0e
     86c:	9f 85       	ldd	r25, Y+15	; 0x0f
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e2       	ldi	r20, 0x20	; 32
     874:	51 e4       	ldi	r21, 0x41	; 65
     876:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	bc 01       	movw	r22, r24
     880:	cd 01       	movw	r24, r26
     882:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     886:	dc 01       	movw	r26, r24
     888:	cb 01       	movw	r24, r22
     88a:	9f 83       	std	Y+7, r25	; 0x07
     88c:	8e 83       	std	Y+6, r24	; 0x06
     88e:	0f c0       	rjmp	.+30     	; 0x8ae <__stack+0x4f>
     890:	80 e9       	ldi	r24, 0x90	; 144
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	9d 83       	std	Y+5, r25	; 0x05
     896:	8c 83       	std	Y+4, r24	; 0x04
     898:	8c 81       	ldd	r24, Y+4	; 0x04
     89a:	9d 81       	ldd	r25, Y+5	; 0x05
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	9d 83       	std	Y+5, r25	; 0x05
     8a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a4:	8e 81       	ldd	r24, Y+6	; 0x06
     8a6:	9f 81       	ldd	r25, Y+7	; 0x07
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	9f 83       	std	Y+7, r25	; 0x07
     8ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ae:	8e 81       	ldd	r24, Y+6	; 0x06
     8b0:	9f 81       	ldd	r25, Y+7	; 0x07
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	69 f7       	brne	.-38     	; 0x890 <__stack+0x31>
     8b6:	24 c0       	rjmp	.+72     	; 0x900 <__stack+0xa1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8b8:	68 85       	ldd	r22, Y+8	; 0x08
     8ba:	79 85       	ldd	r23, Y+9	; 0x09
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9b 85       	ldd	r25, Y+11	; 0x0b
     8c0:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	9f 83       	std	Y+7, r25	; 0x07
     8ca:	8e 83       	std	Y+6, r24	; 0x06
     8cc:	8e 81       	ldd	r24, Y+6	; 0x06
     8ce:	9f 81       	ldd	r25, Y+7	; 0x07
     8d0:	9b 83       	std	Y+3, r25	; 0x03
     8d2:	8a 83       	std	Y+2, r24	; 0x02
     8d4:	8a 81       	ldd	r24, Y+2	; 0x02
     8d6:	9b 81       	ldd	r25, Y+3	; 0x03
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <__stack+0x79>
     8dc:	9b 83       	std	Y+3, r25	; 0x03
     8de:	8a 83       	std	Y+2, r24	; 0x02
     8e0:	0f c0       	rjmp	.+30     	; 0x900 <__stack+0xa1>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8e2:	69 89       	ldd	r22, Y+17	; 0x11
     8e4:	7a 89       	ldd	r23, Y+18	; 0x12
     8e6:	8b 89       	ldd	r24, Y+19	; 0x13
     8e8:	9c 89       	ldd	r25, Y+20	; 0x14
     8ea:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	88 8b       	std	Y+16, r24	; 0x10
     8f4:	88 89       	ldd	r24, Y+16	; 0x10
     8f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	8a 95       	dec	r24
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <__stack+0x9b>
     8fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
	Lcd_Cmd(2);
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
     90c:	88 e2       	ldi	r24, 0x28	; 40
     90e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
	Lcd_WriteCustom();
     912:	0e 94 69 02 	call	0x4d2	; 0x4d2 <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	0e 94 5d 06 	call	0xcba	; 0xcba <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
     91e:	8c e0       	ldi	r24, 0x0C	; 12
     920:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
}
     924:	e4 96       	adiw	r28, 0x34	; 52
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <Enable_Pulse>:

static void Enable_Pulse(void)
{
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	a6 97       	sbiw	r28, 0x26	; 38
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	63 e0       	ldi	r22, 0x03	; 3
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	0e 94 a7 08 	call	0x114e	; 0x114e <Dio_WriteChannel>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e8       	ldi	r26, 0x80	; 128
     95a:	bf e3       	ldi	r27, 0x3F	; 63
     95c:	8b a3       	std	Y+35, r24	; 0x23
     95e:	9c a3       	std	Y+36, r25	; 0x24
     960:	ad a3       	std	Y+37, r26	; 0x25
     962:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     964:	6b a1       	ldd	r22, Y+35	; 0x23
     966:	7c a1       	ldd	r23, Y+36	; 0x24
     968:	8d a1       	ldd	r24, Y+37	; 0x25
     96a:	9e a1       	ldd	r25, Y+38	; 0x26
     96c:	2b ea       	ldi	r18, 0xAB	; 171
     96e:	3a ea       	ldi	r19, 0xAA	; 170
     970:	4a ea       	ldi	r20, 0xAA	; 170
     972:	50 e4       	ldi	r21, 0x40	; 64
     974:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	8f 8f       	std	Y+31, r24	; 0x1f
     97e:	98 a3       	std	Y+32, r25	; 0x20
     980:	a9 a3       	std	Y+33, r26	; 0x21
     982:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     984:	6f 8d       	ldd	r22, Y+31	; 0x1f
     986:	78 a1       	ldd	r23, Y+32	; 0x20
     988:	89 a1       	ldd	r24, Y+33	; 0x21
     98a:	9a a1       	ldd	r25, Y+34	; 0x22
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     998:	88 23       	and	r24, r24
     99a:	1c f4       	brge	.+6      	; 0x9a2 <Enable_Pulse+0x6c>
		__ticks = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	8e 8f       	std	Y+30, r24	; 0x1e
     9a0:	91 c0       	rjmp	.+290    	; 0xac4 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
     9a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9a4:	78 a1       	ldd	r23, Y+32	; 0x20
     9a6:	89 a1       	ldd	r24, Y+33	; 0x21
     9a8:	9a a1       	ldd	r25, Y+34	; 0x22
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	4f e7       	ldi	r20, 0x7F	; 127
     9b0:	53 e4       	ldi	r21, 0x43	; 67
     9b2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     9b6:	18 16       	cp	r1, r24
     9b8:	0c f0       	brlt	.+2      	; 0x9bc <Enable_Pulse+0x86>
     9ba:	7b c0       	rjmp	.+246    	; 0xab2 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
     9bc:	6b a1       	ldd	r22, Y+35	; 0x23
     9be:	7c a1       	ldd	r23, Y+36	; 0x24
     9c0:	8d a1       	ldd	r24, Y+37	; 0x25
     9c2:	9e a1       	ldd	r25, Y+38	; 0x26
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	4a e7       	ldi	r20, 0x7A	; 122
     9ca:	54 e4       	ldi	r21, 0x44	; 68
     9cc:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__divsf3>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	8a 8f       	std	Y+26, r24	; 0x1a
     9d6:	9b 8f       	std	Y+27, r25	; 0x1b
     9d8:	ac 8f       	std	Y+28, r26	; 0x1c
     9da:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9dc:	6a 8d       	ldd	r22, Y+26	; 0x1a
     9de:	7b 8d       	ldd	r23, Y+27	; 0x1b
     9e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4a e7       	ldi	r20, 0x7A	; 122
     9ea:	55 e4       	ldi	r21, 0x45	; 69
     9ec:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	8e 8b       	std	Y+22, r24	; 0x16
     9f6:	9f 8b       	std	Y+23, r25	; 0x17
     9f8:	a8 8f       	std	Y+24, r26	; 0x18
     9fa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     9fc:	6e 89       	ldd	r22, Y+22	; 0x16
     9fe:	7f 89       	ldd	r23, Y+23	; 0x17
     a00:	88 8d       	ldd	r24, Y+24	; 0x18
     a02:	99 8d       	ldd	r25, Y+25	; 0x19
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e8       	ldi	r20, 0x80	; 128
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     a10:	88 23       	and	r24, r24
     a12:	2c f4       	brge	.+10     	; 0xa1e <Enable_Pulse+0xe8>
		__ticks = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	9d 8b       	std	Y+21, r25	; 0x15
     a1a:	8c 8b       	std	Y+20, r24	; 0x14
     a1c:	3f c0       	rjmp	.+126    	; 0xa9c <Enable_Pulse+0x166>
	else if (__tmp > 65535)
     a1e:	6e 89       	ldd	r22, Y+22	; 0x16
     a20:	7f 89       	ldd	r23, Y+23	; 0x17
     a22:	88 8d       	ldd	r24, Y+24	; 0x18
     a24:	99 8d       	ldd	r25, Y+25	; 0x19
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	3f ef       	ldi	r19, 0xFF	; 255
     a2a:	4f e7       	ldi	r20, 0x7F	; 127
     a2c:	57 e4       	ldi	r21, 0x47	; 71
     a2e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     a32:	18 16       	cp	r1, r24
     a34:	4c f5       	brge	.+82     	; 0xa88 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a36:	6a 8d       	ldd	r22, Y+26	; 0x1a
     a38:	7b 8d       	ldd	r23, Y+27	; 0x1b
     a3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e2       	ldi	r20, 0x20	; 32
     a44:	51 e4       	ldi	r21, 0x41	; 65
     a46:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	9d 8b       	std	Y+21, r25	; 0x15
     a5c:	8c 8b       	std	Y+20, r24	; 0x14
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <Enable_Pulse+0x148>
     a60:	80 e9       	ldi	r24, 0x90	; 144
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	9b 8b       	std	Y+19, r25	; 0x13
     a66:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a68:	8a 89       	ldd	r24, Y+18	; 0x12
     a6a:	9b 89       	ldd	r25, Y+19	; 0x13
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <Enable_Pulse+0x136>
     a70:	9b 8b       	std	Y+19, r25	; 0x13
     a72:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a74:	8c 89       	ldd	r24, Y+20	; 0x14
     a76:	9d 89       	ldd	r25, Y+21	; 0x15
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	9d 8b       	std	Y+21, r25	; 0x15
     a7c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7e:	8c 89       	ldd	r24, Y+20	; 0x14
     a80:	9d 89       	ldd	r25, Y+21	; 0x15
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	69 f7       	brne	.-38     	; 0xa60 <Enable_Pulse+0x12a>
     a86:	24 c0       	rjmp	.+72     	; 0xad0 <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a88:	6e 89       	ldd	r22, Y+22	; 0x16
     a8a:	7f 89       	ldd	r23, Y+23	; 0x17
     a8c:	88 8d       	ldd	r24, Y+24	; 0x18
     a8e:	99 8d       	ldd	r25, Y+25	; 0x19
     a90:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	9d 8b       	std	Y+21, r25	; 0x15
     a9a:	8c 8b       	std	Y+20, r24	; 0x14
     a9c:	8c 89       	ldd	r24, Y+20	; 0x14
     a9e:	9d 89       	ldd	r25, Y+21	; 0x15
     aa0:	99 8b       	std	Y+17, r25	; 0x11
     aa2:	88 8b       	std	Y+16, r24	; 0x10
     aa4:	88 89       	ldd	r24, Y+16	; 0x10
     aa6:	99 89       	ldd	r25, Y+17	; 0x11
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <Enable_Pulse+0x172>
     aac:	99 8b       	std	Y+17, r25	; 0x11
     aae:	88 8b       	std	Y+16, r24	; 0x10
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ab2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ab4:	78 a1       	ldd	r23, Y+32	; 0x20
     ab6:	89 a1       	ldd	r24, Y+33	; 0x21
     ab8:	9a a1       	ldd	r25, Y+34	; 0x22
     aba:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	8e 8f       	std	Y+30, r24	; 0x1e
     ac4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ac6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
     aca:	8a 95       	dec	r24
     acc:	f1 f7       	brne	.-4      	; 0xaca <Enable_Pulse+0x194>
     ace:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	63 e0       	ldi	r22, 0x03	; 3
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	0e 94 a7 08 	call	0x114e	; 0x114e <Dio_WriteChannel>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e4       	ldi	r27, 0x40	; 64
     ae2:	8b 87       	std	Y+11, r24	; 0x0b
     ae4:	9c 87       	std	Y+12, r25	; 0x0c
     ae6:	ad 87       	std	Y+13, r26	; 0x0d
     ae8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aea:	6b 85       	ldd	r22, Y+11	; 0x0b
     aec:	7c 85       	ldd	r23, Y+12	; 0x0c
     aee:	8d 85       	ldd	r24, Y+13	; 0x0d
     af0:	9e 85       	ldd	r25, Y+14	; 0x0e
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	4a e7       	ldi	r20, 0x7A	; 122
     af8:	55 e4       	ldi	r21, 0x45	; 69
     afa:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	8f 83       	std	Y+7, r24	; 0x07
     b04:	98 87       	std	Y+8, r25	; 0x08
     b06:	a9 87       	std	Y+9, r26	; 0x09
     b08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b0a:	6f 81       	ldd	r22, Y+7	; 0x07
     b0c:	78 85       	ldd	r23, Y+8	; 0x08
     b0e:	89 85       	ldd	r24, Y+9	; 0x09
     b10:	9a 85       	ldd	r25, Y+10	; 0x0a
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e8       	ldi	r20, 0x80	; 128
     b18:	5f e3       	ldi	r21, 0x3F	; 63
     b1a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__ltsf2>
     b1e:	88 23       	and	r24, r24
     b20:	2c f4       	brge	.+10     	; 0xb2c <Enable_Pulse+0x1f6>
		__ticks = 1;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	9e 83       	std	Y+6, r25	; 0x06
     b28:	8d 83       	std	Y+5, r24	; 0x05
     b2a:	3f c0       	rjmp	.+126    	; 0xbaa <Enable_Pulse+0x274>
	else if (__tmp > 65535)
     b2c:	6f 81       	ldd	r22, Y+7	; 0x07
     b2e:	78 85       	ldd	r23, Y+8	; 0x08
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	9a 85       	ldd	r25, Y+10	; 0x0a
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	3f ef       	ldi	r19, 0xFF	; 255
     b38:	4f e7       	ldi	r20, 0x7F	; 127
     b3a:	57 e4       	ldi	r21, 0x47	; 71
     b3c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__gtsf2>
     b40:	18 16       	cp	r1, r24
     b42:	4c f5       	brge	.+82     	; 0xb96 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b44:	6b 85       	ldd	r22, Y+11	; 0x0b
     b46:	7c 85       	ldd	r23, Y+12	; 0x0c
     b48:	8d 85       	ldd	r24, Y+13	; 0x0d
     b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e2       	ldi	r20, 0x20	; 32
     b52:	51 e4       	ldi	r21, 0x41	; 65
     b54:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	bc 01       	movw	r22, r24
     b5e:	cd 01       	movw	r24, r26
     b60:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	9e 83       	std	Y+6, r25	; 0x06
     b6a:	8d 83       	std	Y+5, r24	; 0x05
     b6c:	0f c0       	rjmp	.+30     	; 0xb8c <Enable_Pulse+0x256>
     b6e:	80 e9       	ldi	r24, 0x90	; 144
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <Enable_Pulse+0x244>
     b7e:	9c 83       	std	Y+4, r25	; 0x04
     b80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b82:	8d 81       	ldd	r24, Y+5	; 0x05
     b84:	9e 81       	ldd	r25, Y+6	; 0x06
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b8c:	8d 81       	ldd	r24, Y+5	; 0x05
     b8e:	9e 81       	ldd	r25, Y+6	; 0x06
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	69 f7       	brne	.-38     	; 0xb6e <Enable_Pulse+0x238>
     b94:	14 c0       	rjmp	.+40     	; 0xbbe <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b96:	6f 81       	ldd	r22, Y+7	; 0x07
     b98:	78 85       	ldd	r23, Y+8	; 0x08
     b9a:	89 85       	ldd	r24, Y+9	; 0x09
     b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9e:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	9e 83       	std	Y+6, r25	; 0x06
     ba8:	8d 83       	std	Y+5, r24	; 0x05
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	9e 81       	ldd	r25, Y+6	; 0x06
     bae:	9a 83       	std	Y+2, r25	; 0x02
     bb0:	89 83       	std	Y+1, r24	; 0x01
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <Enable_Pulse+0x280>
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
     bbe:	a6 96       	adiw	r28, 0x26	; 38
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <Lcd_Data>:

static void Lcd_Data(u8 data) 							// RS-> 1
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <Lcd_Data+0x6>
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    							// MSB
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;							// LSB
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	82 95       	swap	r24
     be6:	80 7f       	andi	r24, 0xF0	; 240
     be8:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);  	// Data Mode
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 a7 08 	call	0x114e	; 0x114e <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	60 ef       	ldi	r22, 0xF0	; 240
     bf8:	4a 81       	ldd	r20, Y+2	; 0x02
     bfa:	0e 94 8a 09 	call	0x1314	; 0x1314 <Dio_WriteGroup>
	Enable_Pulse();
     bfe:	0e 94 9b 04 	call	0x936	; 0x936 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	60 ef       	ldi	r22, 0xF0	; 240
     c06:	49 81       	ldd	r20, Y+1	; 0x01
     c08:	0e 94 8a 09 	call	0x1314	; 0x1314 <Dio_WriteGroup>
	Enable_Pulse();
     c0c:	0e 94 9b 04 	call	0x936	; 0x936 <Enable_Pulse>
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)							// RS-> 0
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <Lcd_Cmd+0x6>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    							// MSB
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;								// LSB
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	82 95       	swap	r24
     c32:	80 7f       	andi	r24, 0xF0	; 240
     c34:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);		//Command Mode
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	0e 94 a7 08 	call	0x114e	; 0x114e <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	60 ef       	ldi	r22, 0xF0	; 240
     c44:	4a 81       	ldd	r20, Y+2	; 0x02
     c46:	0e 94 8a 09 	call	0x1314	; 0x1314 <Dio_WriteGroup>
	Enable_Pulse();
     c4a:	0e 94 9b 04 	call	0x936	; 0x936 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	60 ef       	ldi	r22, 0xF0	; 240
     c52:	49 81       	ldd	r20, Y+1	; 0x01
     c54:	0e 94 8a 09 	call	0x1314	; 0x1314 <Dio_WriteGroup>
	Enable_Pulse();
     c58:	0e 94 9b 04 	call	0x936	; 0x936 <Enable_Pulse>
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	0f 92       	push	r0
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Lcd_Data>
}
     c7a:	0f 90       	pop	r0
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <Lcd_DisplayStr+0x6>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	0a c0       	rjmp	.+20     	; 0xca6 <Lcd_DisplayStr+0x24>
	while (*str != '\0'){
		Lcd_DisplayChr(*str);
     c92:	e9 81       	ldd	r30, Y+1	; 0x01
     c94:	fa 81       	ldd	r31, Y+2	; 0x02
     c96:	80 81       	ld	r24, Z
     c98:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
		str++;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0'){
     ca6:	e9 81       	ldd	r30, Y+1	; 0x01
     ca8:	fa 81       	ldd	r31, Y+2	; 0x02
     caa:	80 81       	ld	r24, Z
     cac:	88 23       	and	r24, r24
     cae:	89 f7       	brne	.-30     	; 0xc92 <Lcd_DisplayStr+0x10>
		Lcd_DisplayChr(*str);
		str++;
	}
}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <Lcd_Goto_Row_Column+0x6>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <Lcd_Goto_Row_Column+0x8>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3c 83       	std	Y+4, r19	; 0x04
     cd2:	2b 83       	std	Y+3, r18	; 0x03
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	31 f0       	breq	.+12     	; 0xce8 <Lcd_Goto_Row_Column+0x2e>
     cdc:	2b 81       	ldd	r18, Y+3	; 0x03
     cde:	3c 81       	ldd	r19, Y+4	; 0x04
     ce0:	21 30       	cpi	r18, 0x01	; 1
     ce2:	31 05       	cpc	r19, r1
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <Lcd_Goto_Row_Column+0x38>
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	80 58       	subi	r24, 0x80	; 128
     cec:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <Lcd_Goto_Row_Column+0x40>
		break;
	case 1:
		Lcd_Cmd(0xC0+col);
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	80 54       	subi	r24, 0x40	; 64
     cf6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Lcd_Cmd>
		break;
	}
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <Lcd_DisplayNum>:

void Lcd_DisplayNum(u16 num)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <Lcd_DisplayNum+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	28 ee       	ldi	r18, 0xE8	; 232
     d1c:	33 e0       	ldi	r19, 0x03	; 3
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d24:	cb 01       	movw	r24, r22
     d26:	80 5d       	subi	r24, 0xD0	; 208
     d28:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	28 ee       	ldi	r18, 0xE8	; 232
     d32:	33 e0       	ldi	r19, 0x03	; 3
     d34:	b9 01       	movw	r22, r18
     d36:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d3a:	24 e6       	ldi	r18, 0x64	; 100
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	b9 01       	movw	r22, r18
     d40:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d44:	cb 01       	movw	r24, r22
     d46:	80 5d       	subi	r24, 0xD0	; 208
     d48:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	28 ee       	ldi	r18, 0xE8	; 232
     d52:	33 e0       	ldi	r19, 0x03	; 3
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d5a:	24 e6       	ldi	r18, 0x64	; 100
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	b9 01       	movw	r22, r18
     d60:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d64:	2a e0       	ldi	r18, 0x0A	; 10
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	b9 01       	movw	r22, r18
     d6a:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d6e:	cb 01       	movw	r24, r22
     d70:	80 5d       	subi	r24, 0xD0	; 208
     d72:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	28 ee       	ldi	r18, 0xE8	; 232
     d7c:	33 e0       	ldi	r19, 0x03	; 3
     d7e:	b9 01       	movw	r22, r18
     d80:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d84:	24 e6       	ldi	r18, 0x64	; 100
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	b9 01       	movw	r22, r18
     d8a:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d8e:	2a e0       	ldi	r18, 0x0A	; 10
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	b9 01       	movw	r22, r18
     d94:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     d98:	80 5d       	subi	r24, 0xD0	; 208
     d9a:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <Lcd_Display3Num>:

void Lcd_Display3Num(u16 num)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <Lcd_Display3Num+0x6>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/100 + '0');
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	24 e6       	ldi	r18, 0x64	; 100
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	b9 01       	movw	r22, r18
     dc0:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     dc4:	cb 01       	movw	r24, r22
     dc6:	80 5d       	subi	r24, 0xD0	; 208
     dc8:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%100/10 + '0');
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	24 e6       	ldi	r18, 0x64	; 100
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	b9 01       	movw	r22, r18
     dd6:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     dda:	2a e0       	ldi	r18, 0x0A	; 10
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	b9 01       	movw	r22, r18
     de0:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     de4:	cb 01       	movw	r24, r22
     de6:	80 5d       	subi	r24, 0xD0	; 208
     de8:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%100%10 + '0');
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	24 e6       	ldi	r18, 0x64	; 100
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	b9 01       	movw	r22, r18
     df6:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     dfa:	2a e0       	ldi	r18, 0x0A	; 10
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     e04:	80 5d       	subi	r24, 0xD0	; 208
     e06:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Lcd_Display2Num>:

void Lcd_Display2Num(u8 num)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/10 + '0');
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a e0       	ldi	r25, 0x0A	; 10
     e24:	69 2f       	mov	r22, r25
     e26:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__udivmodqi4>
     e2a:	80 5d       	subi	r24, 0xD0	; 208
     e2c:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%10+ '0');
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a e0       	ldi	r25, 0x0A	; 10
     e34:	69 2f       	mov	r22, r25
     e36:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__udivmodqi4>
     e3a:	89 2f       	mov	r24, r25
     e3c:	80 5d       	subi	r24, 0xD0	; 208
     e3e:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
}
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <Lcd_DisplayFloat>:

void Lcd_DisplayFloat(f64 floatNum)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	2c 97       	sbiw	r28, 0x0c	; 12
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	69 87       	std	Y+9, r22	; 0x09
     e60:	7a 87       	std	Y+10, r23	; 0x0a
     e62:	8b 87       	std	Y+11, r24	; 0x0b
     e64:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
     e66:	18 86       	std	Y+8, r1	; 0x08
     e68:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	8b 83       	std	Y+3, r24	; 0x03
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	ad 83       	std	Y+5, r26	; 0x05
     e78:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
     e7a:	1a 82       	std	Y+2, r1	; 0x02
     e7c:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
     e7e:	69 85       	ldd	r22, Y+9	; 0x09
     e80:	7a 85       	ldd	r23, Y+10	; 0x0a
     e82:	8b 85       	ldd	r24, Y+11	; 0x0b
     e84:	9c 85       	ldd	r25, Y+12	; 0x0c
     e86:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	98 87       	std	Y+8, r25	; 0x08
     e90:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
     e92:	8f 81       	ldd	r24, Y+7	; 0x07
     e94:	98 85       	ldd	r25, Y+8	; 0x08
     e96:	cc 01       	movw	r24, r24
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__floatunsisf>
     ea4:	9b 01       	movw	r18, r22
     ea6:	ac 01       	movw	r20, r24
     ea8:	69 85       	ldd	r22, Y+9	; 0x09
     eaa:	7a 85       	ldd	r23, Y+10	; 0x0a
     eac:	8b 85       	ldd	r24, Y+11	; 0x0b
     eae:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb0:	0e 94 8d 0c 	call	0x191a	; 0x191a <__subsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8b 83       	std	Y+3, r24	; 0x03
     eba:	9c 83       	std	Y+4, r25	; 0x04
     ebc:	ad 83       	std	Y+5, r26	; 0x05
     ebe:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
     ec0:	6b 81       	ldd	r22, Y+3	; 0x03
     ec2:	7c 81       	ldd	r23, Y+4	; 0x04
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	48 ec       	ldi	r20, 0xC8	; 200
     ece:	52 e4       	ldi	r21, 0x42	; 66
     ed0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	0e 94 84 06 	call	0xd08	; 0xd08 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
     ef0:	8e e2       	ldi	r24, 0x2E	; 46
     ef2:	0e 94 34 06 	call	0xc68	; 0xc68 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	0e 94 84 06 	call	0xd08	; 0xd08 <Lcd_DisplayNum>
}
     efe:	2c 96       	adiw	r28, 0x0c	; 12
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <TIMER0_Init>:
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 64       	ori	r24, 0x48	; 72
     f24:	8c 93       	st	X, r24
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <TIMER0_PWM>:
}
#endif

#if ((TIMER_OPERATION_MODE == TIMER0_MODE_FAST_PWM) || (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT))
void TIMER0_PWM(u8 freq, u8 dutyCycle)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <TIMER0_PWM+0x6>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <TIMER0_PWM+0x8>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	6c 83       	std	Y+4, r22	; 0x04
	u16 result =0 ;
     f3c:	1a 82       	std	Y+2, r1	; 0x02
     f3e:	19 82       	std	Y+1, r1	; 0x01
	result = (dutyCycle * TIMER0_TOP)/100;
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	48 2f       	mov	r20, r24
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	ca 01       	movw	r24, r20
     f48:	9c 01       	movw	r18, r24
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	c9 01       	movw	r24, r18
     f50:	96 95       	lsr	r25
     f52:	98 2f       	mov	r25, r24
     f54:	88 27       	eor	r24, r24
     f56:	97 95       	ror	r25
     f58:	87 95       	ror	r24
     f5a:	82 1b       	sub	r24, r18
     f5c:	93 0b       	sbc	r25, r19
     f5e:	84 0f       	add	r24, r20
     f60:	95 1f       	adc	r25, r21
     f62:	24 e6       	ldi	r18, 0x64	; 100
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 ef 11 	call	0x23de	; 0x23de <__udivmodhi4>
     f6c:	cb 01       	movw	r24, r22
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = result;
     f72:	ec e5       	ldi	r30, 0x5C	; 92
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	80 83       	st	Z, r24

	/*	Check for frequency then choose prescaler	*/
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <Dio_ConfigChannel>:
 */

#include "Dio.h"

void Dio_ConfigChannel(port_type port, pin_type pin, direction_type direction)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <Dio_ConfigChannel+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <Dio_ConfigChannel+0x8>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	6a 83       	std	Y+2, r22	; 0x02
     f9a:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <Dio_ConfigChannel+0x2a>
     fb0:	43 c0       	rjmp	.+134    	; 0x1038 <Dio_ConfigChannel+0xb0>
     fb2:	2c 81       	ldd	r18, Y+4	; 0x04
     fb4:	3d 81       	ldd	r19, Y+5	; 0x05
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	2c f4       	brge	.+10     	; 0xfc6 <Dio_ConfigChannel+0x3e>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <Dio_ConfigChannel+0x58>
     fc4:	bc c0       	rjmp	.+376    	; 0x113e <Dio_ConfigChannel+0x1b6>
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <Dio_ConfigChannel+0x4a>
     fd0:	5f c0       	rjmp	.+190    	; 0x1090 <Dio_ConfigChannel+0x108>
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <Dio_ConfigChannel+0x56>
     fdc:	85 c0       	rjmp	.+266    	; 0x10e8 <Dio_ConfigChannel+0x160>
     fde:	af c0       	rjmp	.+350    	; 0x113e <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if(direction == INPUT)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 23       	and	r24, r24
     fe4:	a9 f4       	brne	.+42     	; 0x1010 <Dio_ConfigChannel+0x88>
			CLR_BIT(DIO_DDRA_REG, pin);
     fe6:	aa e3       	ldi	r26, 0x3A	; 58
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea e3       	ldi	r30, 0x3A	; 58
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <Dio_ConfigChannel+0x7c>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <Dio_ConfigChannel+0x78>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	97 c0       	rjmp	.+302    	; 0x113e <Dio_ConfigChannel+0x1b6>
		else
			SET_BIT(DIO_DDRA_REG, pin);
    1010:	aa e3       	ldi	r26, 0x3A	; 58
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ea e3       	ldi	r30, 0x3A	; 58
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <Dio_ConfigChannel+0xa6>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <Dio_ConfigChannel+0xa2>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	83 c0       	rjmp	.+262    	; 0x113e <Dio_ConfigChannel+0x1b6>
		break;
	case DIO_PORTB:
		if(direction == INPUT)
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 23       	and	r24, r24
    103c:	a9 f4       	brne	.+42     	; 0x1068 <Dio_ConfigChannel+0xe0>
			CLR_BIT(DIO_DDRB_REG, pin);
    103e:	a7 e3       	ldi	r26, 0x37	; 55
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e7 e3       	ldi	r30, 0x37	; 55
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <Dio_ConfigChannel+0xd4>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <Dio_ConfigChannel+0xd0>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	6b c0       	rjmp	.+214    	; 0x113e <Dio_ConfigChannel+0x1b6>
		else
			SET_BIT(DIO_DDRB_REG, pin);
    1068:	a7 e3       	ldi	r26, 0x37	; 55
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e7 e3       	ldi	r30, 0x37	; 55
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <Dio_ConfigChannel+0xfe>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <Dio_ConfigChannel+0xfa>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	57 c0       	rjmp	.+174    	; 0x113e <Dio_ConfigChannel+0x1b6>
		break;
	case DIO_PORTC:
		if(direction == INPUT)
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 23       	and	r24, r24
    1094:	a9 f4       	brne	.+42     	; 0x10c0 <Dio_ConfigChannel+0x138>
			CLR_BIT(DIO_DDRC_REG, pin);
    1096:	a4 e3       	ldi	r26, 0x34	; 52
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e4 e3       	ldi	r30, 0x34	; 52
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <Dio_ConfigChannel+0x12c>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <Dio_ConfigChannel+0x128>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	3f c0       	rjmp	.+126    	; 0x113e <Dio_ConfigChannel+0x1b6>
		else
			SET_BIT(DIO_DDRC_REG, pin);
    10c0:	a4 e3       	ldi	r26, 0x34	; 52
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e4 e3       	ldi	r30, 0x34	; 52
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <Dio_ConfigChannel+0x156>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <Dio_ConfigChannel+0x152>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	2b c0       	rjmp	.+86     	; 0x113e <Dio_ConfigChannel+0x1b6>
		break;
	case DIO_PORTD:
		if(direction == INPUT)
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	88 23       	and	r24, r24
    10ec:	a9 f4       	brne	.+42     	; 0x1118 <Dio_ConfigChannel+0x190>
			CLR_BIT(DIO_DDRD_REG, pin);
    10ee:	a1 e3       	ldi	r26, 0x31	; 49
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <Dio_ConfigChannel+0x184>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <Dio_ConfigChannel+0x180>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	13 c0       	rjmp	.+38     	; 0x113e <Dio_ConfigChannel+0x1b6>
		else
			SET_BIT(DIO_DDRD_REG, pin);
    1118:	a1 e3       	ldi	r26, 0x31	; 49
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e1 e3       	ldi	r30, 0x31	; 49
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <Dio_ConfigChannel+0x1ae>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <Dio_ConfigChannel+0x1aa>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
		break;
	}
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <Dio_WriteChannel>:

void Dio_WriteChannel(port_type port, pin_type pin, level_type level)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <Dio_WriteChannel+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <Dio_WriteChannel+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3d 83       	std	Y+5, r19	; 0x05
    116a:	2c 83       	std	Y+4, r18	; 0x04
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <Dio_WriteChannel+0x2a>
    1176:	43 c0       	rjmp	.+134    	; 0x11fe <Dio_WriteChannel+0xb0>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <Dio_WriteChannel+0x3e>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	71 f0       	breq	.+28     	; 0x11a6 <Dio_WriteChannel+0x58>
    118a:	bc c0       	rjmp	.+376    	; 0x1304 <Dio_WriteChannel+0x1b6>
    118c:	2c 81       	ldd	r18, Y+4	; 0x04
    118e:	3d 81       	ldd	r19, Y+5	; 0x05
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <Dio_WriteChannel+0x4a>
    1196:	5f c0       	rjmp	.+190    	; 0x1256 <Dio_WriteChannel+0x108>
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <Dio_WriteChannel+0x56>
    11a2:	85 c0       	rjmp	.+266    	; 0x12ae <Dio_WriteChannel+0x160>
    11a4:	af c0       	rjmp	.+350    	; 0x1304 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if(level == STD_HIGH)
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	a1 f4       	brne	.+40     	; 0x11d4 <Dio_WriteChannel+0x86>
			SET_BIT(DIO_PORTA_REG, pin);
    11ac:	ab e3       	ldi	r26, 0x3B	; 59
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <Dio_WriteChannel+0x7c>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <Dio_WriteChannel+0x78>
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	98 c0       	rjmp	.+304    	; 0x1304 <Dio_WriteChannel+0x1b6>
		else
			CLR_BIT(DIO_PORTA_REG, pin);
    11d4:	ab e3       	ldi	r26, 0x3B	; 59
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	eb e3       	ldi	r30, 0x3B	; 59
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <Dio_WriteChannel+0xa4>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <Dio_WriteChannel+0xa0>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	83 c0       	rjmp	.+262    	; 0x1304 <Dio_WriteChannel+0x1b6>
		break;
	case DIO_PORTB:
		if(level == STD_HIGH)
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	a1 f4       	brne	.+40     	; 0x122c <Dio_WriteChannel+0xde>
			SET_BIT(DIO_PORTB_REG, pin);
    1204:	a8 e3       	ldi	r26, 0x38	; 56
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <Dio_WriteChannel+0xd4>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <Dio_WriteChannel+0xd0>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	6c c0       	rjmp	.+216    	; 0x1304 <Dio_WriteChannel+0x1b6>
		else
			CLR_BIT(DIO_PORTB_REG, pin);
    122c:	a8 e3       	ldi	r26, 0x38	; 56
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <Dio_WriteChannel+0xfc>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <Dio_WriteChannel+0xf8>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	57 c0       	rjmp	.+174    	; 0x1304 <Dio_WriteChannel+0x1b6>
		break;
	case DIO_PORTC:
		if(level == STD_HIGH)
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	a1 f4       	brne	.+40     	; 0x1284 <Dio_WriteChannel+0x136>
			SET_BIT(DIO_PORTC_REG, pin);
    125c:	a5 e3       	ldi	r26, 0x35	; 53
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e3       	ldi	r30, 0x35	; 53
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <Dio_WriteChannel+0x12c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <Dio_WriteChannel+0x128>
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	40 c0       	rjmp	.+128    	; 0x1304 <Dio_WriteChannel+0x1b6>
		else
			CLR_BIT(DIO_PORTC_REG, pin);
    1284:	a5 e3       	ldi	r26, 0x35	; 53
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e3       	ldi	r30, 0x35	; 53
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <Dio_WriteChannel+0x154>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <Dio_WriteChannel+0x150>
    12a6:	80 95       	com	r24
    12a8:	84 23       	and	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	2b c0       	rjmp	.+86     	; 0x1304 <Dio_WriteChannel+0x1b6>
		break;
	case DIO_PORTD:
		if(level == STD_HIGH)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	a1 f4       	brne	.+40     	; 0x12dc <Dio_WriteChannel+0x18e>
			SET_BIT(DIO_PORTD_REG, pin);
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <Dio_WriteChannel+0x184>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <Dio_WriteChannel+0x180>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <Dio_WriteChannel+0x1b6>
		else
			CLR_BIT(DIO_PORTD_REG, pin);
    12dc:	a2 e3       	ldi	r26, 0x32	; 50
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <Dio_WriteChannel+0x1ac>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <Dio_WriteChannel+0x1a8>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
		break;
	}
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <Dio_WriteGroup>:

void Dio_WriteGroup(port_type port, u8 mask, u8 data)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <Dio_WriteGroup+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <Dio_WriteGroup+0x8>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02
    1326:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3d 83       	std	Y+5, r19	; 0x05
    1330:	2c 83       	std	Y+4, r18	; 0x04
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	29 f1       	breq	.+74     	; 0x1386 <Dio_WriteGroup+0x72>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <Dio_WriteGroup+0x3c>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <Dio_WriteGroup+0x52>
    134e:	4a c0       	rjmp	.+148    	; 0x13e4 <Dio_WriteGroup+0xd0>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	31 f1       	breq	.+76     	; 0x13a6 <Dio_WriteGroup+0x92>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	89 f1       	breq	.+98     	; 0x13c6 <Dio_WriteGroup+0xb2>
    1364:	3f c0       	rjmp	.+126    	; 0x13e4 <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    1366:	ab e3       	ldi	r26, 0x3B	; 59
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e3       	ldi	r30, 0x3B	; 59
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	98 2f       	mov	r25, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 95       	com	r24
    1376:	29 2f       	mov	r18, r25
    1378:	28 23       	and	r18, r24
    137a:	9b 81       	ldd	r25, Y+3	; 0x03
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	89 23       	and	r24, r25
    1380:	82 2b       	or	r24, r18
    1382:	8c 93       	st	X, r24
    1384:	2f c0       	rjmp	.+94     	; 0x13e4 <Dio_WriteGroup+0xd0>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    1386:	a8 e3       	ldi	r26, 0x38	; 56
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e3       	ldi	r30, 0x3B	; 59
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	98 2f       	mov	r25, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	80 95       	com	r24
    1396:	29 2f       	mov	r18, r25
    1398:	28 23       	and	r18, r24
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	89 23       	and	r24, r25
    13a0:	82 2b       	or	r24, r18
    13a2:	8c 93       	st	X, r24
    13a4:	1f c0       	rjmp	.+62     	; 0x13e4 <Dio_WriteGroup+0xd0>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    13a6:	a5 e3       	ldi	r26, 0x35	; 53
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb e3       	ldi	r30, 0x3B	; 59
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	98 2f       	mov	r25, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 95       	com	r24
    13b6:	29 2f       	mov	r18, r25
    13b8:	28 23       	and	r18, r24
    13ba:	9b 81       	ldd	r25, Y+3	; 0x03
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	89 23       	and	r24, r25
    13c0:	82 2b       	or	r24, r18
    13c2:	8c 93       	st	X, r24
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <Dio_WriteGroup+0xd0>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    13c6:	a2 e3       	ldi	r26, 0x32	; 50
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	98 2f       	mov	r25, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 95       	com	r24
    13d6:	29 2f       	mov	r18, r25
    13d8:	28 23       	and	r18, r24
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	89 23       	and	r24, r25
    13e0:	82 2b       	or	r24, r18
    13e2:	8c 93       	st	X, r24
		break;
	}
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <Dio_ToggelChannel>:

void Dio_ToggelChannel(port_type port, pin_type pin)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <Dio_ToggelChannel+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <Dio_ToggelChannel+0x8>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	3c 83       	std	Y+4, r19	; 0x04
    140c:	2b 83       	std	Y+3, r18	; 0x03
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	91 05       	cpc	r25, r1
    1416:	49 f1       	breq	.+82     	; 0x146a <Dio_ToggelChannel+0x76>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	2c f4       	brge	.+10     	; 0x142c <Dio_ToggelChannel+0x38>
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	61 f0       	breq	.+24     	; 0x1442 <Dio_ToggelChannel+0x4e>
    142a:	5a c0       	rjmp	.+180    	; 0x14e0 <Dio_ToggelChannel+0xec>
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	71 f1       	breq	.+92     	; 0x1492 <Dio_ToggelChannel+0x9e>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	91 05       	cpc	r25, r1
    143e:	e9 f1       	breq	.+122    	; 0x14ba <Dio_ToggelChannel+0xc6>
    1440:	4f c0       	rjmp	.+158    	; 0x14e0 <Dio_ToggelChannel+0xec>
	{
	case DIO_PORTA:
		TOG_BIT(DIO_PORTA_REG, pin);
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <Dio_ToggelChannel+0x6c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <Dio_ToggelChannel+0x68>
    1464:	84 27       	eor	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	3b c0       	rjmp	.+118    	; 0x14e0 <Dio_ToggelChannel+0xec>
		break;
	case DIO_PORTB:
		TOG_BIT(DIO_PORTB_REG, pin);
    146a:	a8 e3       	ldi	r26, 0x38	; 56
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e3       	ldi	r30, 0x38	; 56
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <Dio_ToggelChannel+0x94>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <Dio_ToggelChannel+0x90>
    148c:	84 27       	eor	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	27 c0       	rjmp	.+78     	; 0x14e0 <Dio_ToggelChannel+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(DIO_PORTC_REG, pin);
    1492:	a5 e3       	ldi	r26, 0x35	; 53
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e3       	ldi	r30, 0x35	; 53
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <Dio_ToggelChannel+0xbc>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <Dio_ToggelChannel+0xb8>
    14b4:	84 27       	eor	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	13 c0       	rjmp	.+38     	; 0x14e0 <Dio_ToggelChannel+0xec>
		break;
	case DIO_PORTD:
		TOG_BIT(DIO_PORTD_REG, pin);
    14ba:	a2 e3       	ldi	r26, 0x32	; 50
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e2 e3       	ldi	r30, 0x32	; 50
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <Dio_ToggelChannel+0xe4>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <Dio_ToggelChannel+0xe0>
    14dc:	84 27       	eor	r24, r20
    14de:	8c 93       	st	X, r24
		break;
	}
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <Dio_ReadChannel>:

level_type Dio_ReadChannel(port_type port, pin_type pin)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <Dio_ReadChannel+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <Dio_ReadChannel+0x8>
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
	level_type result = STD_LOW;
    1500:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	89 f1       	breq	.+98     	; 0x1578 <Dio_ReadChannel+0x8a>
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <Dio_ReadChannel+0x3c>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f0       	breq	.+26     	; 0x1542 <Dio_ReadChannel+0x54>
    1528:	77 c0       	rjmp	.+238    	; 0x1618 <Dio_ReadChannel+0x12a>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	e9 f1       	breq	.+122    	; 0x15ae <Dio_ReadChannel+0xc0>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <Dio_ReadChannel+0x52>
    153e:	52 c0       	rjmp	.+164    	; 0x15e4 <Dio_ReadChannel+0xf6>
    1540:	6b c0       	rjmp	.+214    	; 0x1618 <Dio_ReadChannel+0x12a>
	{
	case DIO_PORTA:
		if(CHK_BIT(DIO_PINA_REG, pin))
    1542:	a9 e3       	ldi	r26, 0x39	; 57
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e9 e3       	ldi	r30, 0x39	; 57
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Dio_ReadChannel+0x72>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <Dio_ReadChannel+0x6e>
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	8c 91       	ld	r24, X
    156a:	88 23       	and	r24, r24
    156c:	19 f0       	breq	.+6      	; 0x1574 <Dio_ReadChannel+0x86>
			result = STD_HIGH;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	52 c0       	rjmp	.+164    	; 0x1618 <Dio_ReadChannel+0x12a>
		else
			result = STD_LOW;
    1574:	19 82       	std	Y+1, r1	; 0x01
    1576:	50 c0       	rjmp	.+160    	; 0x1618 <Dio_ReadChannel+0x12a>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DIO_PINB_REG, pin))
    1578:	a6 e3       	ldi	r26, 0x36	; 54
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e6 e3       	ldi	r30, 0x36	; 54
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <Dio_ReadChannel+0xa8>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <Dio_ReadChannel+0xa4>
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	8c 91       	ld	r24, X
    15a0:	88 23       	and	r24, r24
    15a2:	19 f0       	breq	.+6      	; 0x15aa <Dio_ReadChannel+0xbc>
			result = STD_HIGH;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	37 c0       	rjmp	.+110    	; 0x1618 <Dio_ReadChannel+0x12a>
		else
			result = STD_LOW;
    15aa:	19 82       	std	Y+1, r1	; 0x01
    15ac:	35 c0       	rjmp	.+106    	; 0x1618 <Dio_ReadChannel+0x12a>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DIO_PINC_REG, pin))
    15ae:	a3 e3       	ldi	r26, 0x33	; 51
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e3 e3       	ldi	r30, 0x33	; 51
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <Dio_ReadChannel+0xde>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <Dio_ReadChannel+0xda>
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	8c 91       	ld	r24, X
    15d6:	88 23       	and	r24, r24
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <Dio_ReadChannel+0xf2>
			result = STD_HIGH;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	1c c0       	rjmp	.+56     	; 0x1618 <Dio_ReadChannel+0x12a>
		else
			result = STD_LOW;
    15e0:	19 82       	std	Y+1, r1	; 0x01
    15e2:	1a c0       	rjmp	.+52     	; 0x1618 <Dio_ReadChannel+0x12a>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DIO_PIND_REG, pin))
    15e4:	a0 e3       	ldi	r26, 0x30	; 48
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e0 e3       	ldi	r30, 0x30	; 48
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <Dio_ReadChannel+0x114>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <Dio_ReadChannel+0x110>
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	8c 91       	ld	r24, X
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <Dio_ReadChannel+0x128>
			result = STD_HIGH;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <Dio_ReadChannel+0x12a>
		else
			result = STD_LOW;
    1616:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return result;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <__fixunssfsi>:
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	7b 01       	movw	r14, r22
    1634:	8c 01       	movw	r16, r24
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	5f e4       	ldi	r21, 0x4F	; 79
    163e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__gesf2>
    1642:	88 23       	and	r24, r24
    1644:	8c f0       	brlt	.+34     	; 0x1668 <__fixunssfsi+0x3e>
    1646:	c8 01       	movw	r24, r16
    1648:	b7 01       	movw	r22, r14
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	5f e4       	ldi	r21, 0x4F	; 79
    1652:	0e 94 8d 0c 	call	0x191a	; 0x191a <__subsf3>
    1656:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fixsfsi>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	20 50       	subi	r18, 0x00	; 0
    1660:	30 40       	sbci	r19, 0x00	; 0
    1662:	40 40       	sbci	r20, 0x00	; 0
    1664:	50 48       	sbci	r21, 0x80	; 128
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <__fixunssfsi+0x4a>
    1668:	c8 01       	movw	r24, r16
    166a:	b7 01       	movw	r22, r14
    166c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fixsfsi>
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	b9 01       	movw	r22, r18
    1676:	ca 01       	movw	r24, r20
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	08 95       	ret

00001682 <_fpadd_parts>:
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e4       	ldi	r30, 0x47	; 71
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
    168e:	dc 01       	movw	r26, r24
    1690:	2b 01       	movw	r4, r22
    1692:	fa 01       	movw	r30, r20
    1694:	9c 91       	ld	r25, X
    1696:	92 30       	cpi	r25, 0x02	; 2
    1698:	08 f4       	brcc	.+2      	; 0x169c <_fpadd_parts+0x1a>
    169a:	39 c1       	rjmp	.+626    	; 0x190e <_fpadd_parts+0x28c>
    169c:	eb 01       	movw	r28, r22
    169e:	88 81       	ld	r24, Y
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <_fpadd_parts+0x24>
    16a4:	33 c1       	rjmp	.+614    	; 0x190c <_fpadd_parts+0x28a>
    16a6:	94 30       	cpi	r25, 0x04	; 4
    16a8:	69 f4       	brne	.+26     	; 0x16c4 <_fpadd_parts+0x42>
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <_fpadd_parts+0x2e>
    16ae:	2f c1       	rjmp	.+606    	; 0x190e <_fpadd_parts+0x28c>
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	9c 91       	ld	r25, X
    16b4:	11 97       	sbiw	r26, 0x01	; 1
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	98 17       	cp	r25, r24
    16ba:	09 f4       	brne	.+2      	; 0x16be <_fpadd_parts+0x3c>
    16bc:	28 c1       	rjmp	.+592    	; 0x190e <_fpadd_parts+0x28c>
    16be:	a9 ea       	ldi	r26, 0xA9	; 169
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	25 c1       	rjmp	.+586    	; 0x190e <_fpadd_parts+0x28c>
    16c4:	84 30       	cpi	r24, 0x04	; 4
    16c6:	09 f4       	brne	.+2      	; 0x16ca <_fpadd_parts+0x48>
    16c8:	21 c1       	rjmp	.+578    	; 0x190c <_fpadd_parts+0x28a>
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	a9 f4       	brne	.+42     	; 0x16f8 <_fpadd_parts+0x76>
    16ce:	92 30       	cpi	r25, 0x02	; 2
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <_fpadd_parts+0x52>
    16d2:	1d c1       	rjmp	.+570    	; 0x190e <_fpadd_parts+0x28c>
    16d4:	9a 01       	movw	r18, r20
    16d6:	ad 01       	movw	r20, r26
    16d8:	88 e0       	ldi	r24, 0x08	; 8
    16da:	ea 01       	movw	r28, r20
    16dc:	09 90       	ld	r0, Y+
    16de:	ae 01       	movw	r20, r28
    16e0:	e9 01       	movw	r28, r18
    16e2:	09 92       	st	Y+, r0
    16e4:	9e 01       	movw	r18, r28
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	c1 f7       	brne	.-16     	; 0x16da <_fpadd_parts+0x58>
    16ea:	e2 01       	movw	r28, r4
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	9c 91       	ld	r25, X
    16f2:	89 23       	and	r24, r25
    16f4:	81 83       	std	Z+1, r24	; 0x01
    16f6:	08 c1       	rjmp	.+528    	; 0x1908 <_fpadd_parts+0x286>
    16f8:	92 30       	cpi	r25, 0x02	; 2
    16fa:	09 f4       	brne	.+2      	; 0x16fe <_fpadd_parts+0x7c>
    16fc:	07 c1       	rjmp	.+526    	; 0x190c <_fpadd_parts+0x28a>
    16fe:	12 96       	adiw	r26, 0x02	; 2
    1700:	2d 90       	ld	r2, X+
    1702:	3c 90       	ld	r3, X
    1704:	13 97       	sbiw	r26, 0x03	; 3
    1706:	eb 01       	movw	r28, r22
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	14 96       	adiw	r26, 0x04	; 4
    170e:	ad 90       	ld	r10, X+
    1710:	bd 90       	ld	r11, X+
    1712:	cd 90       	ld	r12, X+
    1714:	dc 90       	ld	r13, X
    1716:	17 97       	sbiw	r26, 0x07	; 7
    1718:	ec 80       	ldd	r14, Y+4	; 0x04
    171a:	fd 80       	ldd	r15, Y+5	; 0x05
    171c:	0e 81       	ldd	r16, Y+6	; 0x06
    171e:	1f 81       	ldd	r17, Y+7	; 0x07
    1720:	91 01       	movw	r18, r2
    1722:	28 1b       	sub	r18, r24
    1724:	39 0b       	sbc	r19, r25
    1726:	b9 01       	movw	r22, r18
    1728:	37 ff       	sbrs	r19, 7
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <_fpadd_parts+0xb2>
    172c:	66 27       	eor	r22, r22
    172e:	77 27       	eor	r23, r23
    1730:	62 1b       	sub	r22, r18
    1732:	73 0b       	sbc	r23, r19
    1734:	60 32       	cpi	r22, 0x20	; 32
    1736:	71 05       	cpc	r23, r1
    1738:	0c f0       	brlt	.+2      	; 0x173c <_fpadd_parts+0xba>
    173a:	61 c0       	rjmp	.+194    	; 0x17fe <_fpadd_parts+0x17c>
    173c:	12 16       	cp	r1, r18
    173e:	13 06       	cpc	r1, r19
    1740:	6c f5       	brge	.+90     	; 0x179c <_fpadd_parts+0x11a>
    1742:	37 01       	movw	r6, r14
    1744:	48 01       	movw	r8, r16
    1746:	06 2e       	mov	r0, r22
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <_fpadd_parts+0xd0>
    174a:	96 94       	lsr	r9
    174c:	87 94       	ror	r8
    174e:	77 94       	ror	r7
    1750:	67 94       	ror	r6
    1752:	0a 94       	dec	r0
    1754:	d2 f7       	brpl	.-12     	; 0x174a <_fpadd_parts+0xc8>
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <_fpadd_parts+0xe6>
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	44 1f       	adc	r20, r20
    1766:	55 1f       	adc	r21, r21
    1768:	6a 95       	dec	r22
    176a:	d2 f7       	brpl	.-12     	; 0x1760 <_fpadd_parts+0xde>
    176c:	21 50       	subi	r18, 0x01	; 1
    176e:	30 40       	sbci	r19, 0x00	; 0
    1770:	40 40       	sbci	r20, 0x00	; 0
    1772:	50 40       	sbci	r21, 0x00	; 0
    1774:	2e 21       	and	r18, r14
    1776:	3f 21       	and	r19, r15
    1778:	40 23       	and	r20, r16
    177a:	51 23       	and	r21, r17
    177c:	21 15       	cp	r18, r1
    177e:	31 05       	cpc	r19, r1
    1780:	41 05       	cpc	r20, r1
    1782:	51 05       	cpc	r21, r1
    1784:	21 f0       	breq	.+8      	; 0x178e <_fpadd_parts+0x10c>
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	79 01       	movw	r14, r18
    1790:	8a 01       	movw	r16, r20
    1792:	e6 28       	or	r14, r6
    1794:	f7 28       	or	r15, r7
    1796:	08 29       	or	r16, r8
    1798:	19 29       	or	r17, r9
    179a:	3c c0       	rjmp	.+120    	; 0x1814 <_fpadd_parts+0x192>
    179c:	23 2b       	or	r18, r19
    179e:	d1 f1       	breq	.+116    	; 0x1814 <_fpadd_parts+0x192>
    17a0:	26 0e       	add	r2, r22
    17a2:	37 1e       	adc	r3, r23
    17a4:	35 01       	movw	r6, r10
    17a6:	46 01       	movw	r8, r12
    17a8:	06 2e       	mov	r0, r22
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <_fpadd_parts+0x132>
    17ac:	96 94       	lsr	r9
    17ae:	87 94       	ror	r8
    17b0:	77 94       	ror	r7
    17b2:	67 94       	ror	r6
    17b4:	0a 94       	dec	r0
    17b6:	d2 f7       	brpl	.-12     	; 0x17ac <_fpadd_parts+0x12a>
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <_fpadd_parts+0x148>
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	44 1f       	adc	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	6a 95       	dec	r22
    17cc:	d2 f7       	brpl	.-12     	; 0x17c2 <_fpadd_parts+0x140>
    17ce:	21 50       	subi	r18, 0x01	; 1
    17d0:	30 40       	sbci	r19, 0x00	; 0
    17d2:	40 40       	sbci	r20, 0x00	; 0
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	2a 21       	and	r18, r10
    17d8:	3b 21       	and	r19, r11
    17da:	4c 21       	and	r20, r12
    17dc:	5d 21       	and	r21, r13
    17de:	21 15       	cp	r18, r1
    17e0:	31 05       	cpc	r19, r1
    17e2:	41 05       	cpc	r20, r1
    17e4:	51 05       	cpc	r21, r1
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <_fpadd_parts+0x16e>
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	59 01       	movw	r10, r18
    17f2:	6a 01       	movw	r12, r20
    17f4:	a6 28       	or	r10, r6
    17f6:	b7 28       	or	r11, r7
    17f8:	c8 28       	or	r12, r8
    17fa:	d9 28       	or	r13, r9
    17fc:	0b c0       	rjmp	.+22     	; 0x1814 <_fpadd_parts+0x192>
    17fe:	82 15       	cp	r24, r2
    1800:	93 05       	cpc	r25, r3
    1802:	2c f0       	brlt	.+10     	; 0x180e <_fpadd_parts+0x18c>
    1804:	1c 01       	movw	r2, r24
    1806:	aa 24       	eor	r10, r10
    1808:	bb 24       	eor	r11, r11
    180a:	65 01       	movw	r12, r10
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <_fpadd_parts+0x192>
    180e:	ee 24       	eor	r14, r14
    1810:	ff 24       	eor	r15, r15
    1812:	87 01       	movw	r16, r14
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	9c 91       	ld	r25, X
    1818:	d2 01       	movw	r26, r4
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	8c 91       	ld	r24, X
    181e:	98 17       	cp	r25, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <_fpadd_parts+0x1a2>
    1822:	45 c0       	rjmp	.+138    	; 0x18ae <_fpadd_parts+0x22c>
    1824:	99 23       	and	r25, r25
    1826:	39 f0       	breq	.+14     	; 0x1836 <_fpadd_parts+0x1b4>
    1828:	a8 01       	movw	r20, r16
    182a:	97 01       	movw	r18, r14
    182c:	2a 19       	sub	r18, r10
    182e:	3b 09       	sbc	r19, r11
    1830:	4c 09       	sbc	r20, r12
    1832:	5d 09       	sbc	r21, r13
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <_fpadd_parts+0x1c0>
    1836:	a6 01       	movw	r20, r12
    1838:	95 01       	movw	r18, r10
    183a:	2e 19       	sub	r18, r14
    183c:	3f 09       	sbc	r19, r15
    183e:	40 0b       	sbc	r20, r16
    1840:	51 0b       	sbc	r21, r17
    1842:	57 fd       	sbrc	r21, 7
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <_fpadd_parts+0x1d4>
    1846:	11 82       	std	Z+1, r1	; 0x01
    1848:	33 82       	std	Z+3, r3	; 0x03
    184a:	22 82       	std	Z+2, r2	; 0x02
    184c:	24 83       	std	Z+4, r18	; 0x04
    184e:	35 83       	std	Z+5, r19	; 0x05
    1850:	46 83       	std	Z+6, r20	; 0x06
    1852:	57 83       	std	Z+7, r21	; 0x07
    1854:	1d c0       	rjmp	.+58     	; 0x1890 <_fpadd_parts+0x20e>
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	81 83       	std	Z+1, r24	; 0x01
    185a:	33 82       	std	Z+3, r3	; 0x03
    185c:	22 82       	std	Z+2, r2	; 0x02
    185e:	88 27       	eor	r24, r24
    1860:	99 27       	eor	r25, r25
    1862:	dc 01       	movw	r26, r24
    1864:	82 1b       	sub	r24, r18
    1866:	93 0b       	sbc	r25, r19
    1868:	a4 0b       	sbc	r26, r20
    186a:	b5 0b       	sbc	r27, r21
    186c:	84 83       	std	Z+4, r24	; 0x04
    186e:	95 83       	std	Z+5, r25	; 0x05
    1870:	a6 83       	std	Z+6, r26	; 0x06
    1872:	b7 83       	std	Z+7, r27	; 0x07
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <_fpadd_parts+0x20e>
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	44 1f       	adc	r20, r20
    187c:	55 1f       	adc	r21, r21
    187e:	24 83       	std	Z+4, r18	; 0x04
    1880:	35 83       	std	Z+5, r19	; 0x05
    1882:	46 83       	std	Z+6, r20	; 0x06
    1884:	57 83       	std	Z+7, r21	; 0x07
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	93 83       	std	Z+3, r25	; 0x03
    188e:	82 83       	std	Z+2, r24	; 0x02
    1890:	24 81       	ldd	r18, Z+4	; 0x04
    1892:	35 81       	ldd	r19, Z+5	; 0x05
    1894:	46 81       	ldd	r20, Z+6	; 0x06
    1896:	57 81       	ldd	r21, Z+7	; 0x07
    1898:	da 01       	movw	r26, r20
    189a:	c9 01       	movw	r24, r18
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	a1 09       	sbc	r26, r1
    18a0:	b1 09       	sbc	r27, r1
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	af 4f       	sbci	r26, 0xFF	; 255
    18a8:	bf 43       	sbci	r27, 0x3F	; 63
    18aa:	28 f3       	brcs	.-54     	; 0x1876 <_fpadd_parts+0x1f4>
    18ac:	0b c0       	rjmp	.+22     	; 0x18c4 <_fpadd_parts+0x242>
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	33 82       	std	Z+3, r3	; 0x03
    18b2:	22 82       	std	Z+2, r2	; 0x02
    18b4:	ea 0c       	add	r14, r10
    18b6:	fb 1c       	adc	r15, r11
    18b8:	0c 1d       	adc	r16, r12
    18ba:	1d 1d       	adc	r17, r13
    18bc:	e4 82       	std	Z+4, r14	; 0x04
    18be:	f5 82       	std	Z+5, r15	; 0x05
    18c0:	06 83       	std	Z+6, r16	; 0x06
    18c2:	17 83       	std	Z+7, r17	; 0x07
    18c4:	83 e0       	ldi	r24, 0x03	; 3
    18c6:	80 83       	st	Z, r24
    18c8:	24 81       	ldd	r18, Z+4	; 0x04
    18ca:	35 81       	ldd	r19, Z+5	; 0x05
    18cc:	46 81       	ldd	r20, Z+6	; 0x06
    18ce:	57 81       	ldd	r21, Z+7	; 0x07
    18d0:	57 ff       	sbrs	r21, 7
    18d2:	1a c0       	rjmp	.+52     	; 0x1908 <_fpadd_parts+0x286>
    18d4:	c9 01       	movw	r24, r18
    18d6:	aa 27       	eor	r26, r26
    18d8:	97 fd       	sbrc	r25, 7
    18da:	a0 95       	com	r26
    18dc:	ba 2f       	mov	r27, r26
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	90 70       	andi	r25, 0x00	; 0
    18e2:	a0 70       	andi	r26, 0x00	; 0
    18e4:	b0 70       	andi	r27, 0x00	; 0
    18e6:	56 95       	lsr	r21
    18e8:	47 95       	ror	r20
    18ea:	37 95       	ror	r19
    18ec:	27 95       	ror	r18
    18ee:	82 2b       	or	r24, r18
    18f0:	93 2b       	or	r25, r19
    18f2:	a4 2b       	or	r26, r20
    18f4:	b5 2b       	or	r27, r21
    18f6:	84 83       	std	Z+4, r24	; 0x04
    18f8:	95 83       	std	Z+5, r25	; 0x05
    18fa:	a6 83       	std	Z+6, r26	; 0x06
    18fc:	b7 83       	std	Z+7, r27	; 0x07
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	93 83       	std	Z+3, r25	; 0x03
    1906:	82 83       	std	Z+2, r24	; 0x02
    1908:	df 01       	movw	r26, r30
    190a:	01 c0       	rjmp	.+2      	; 0x190e <_fpadd_parts+0x28c>
    190c:	d2 01       	movw	r26, r4
    190e:	cd 01       	movw	r24, r26
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	e2 e1       	ldi	r30, 0x12	; 18
    1916:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

0000191a <__subsf3>:
    191a:	a0 e2       	ldi	r26, 0x20	; 32
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e3 e9       	ldi	r30, 0x93	; 147
    1920:	fc e0       	ldi	r31, 0x0C	; 12
    1922:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
    1926:	69 83       	std	Y+1, r22	; 0x01
    1928:	7a 83       	std	Y+2, r23	; 0x02
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	2d 83       	std	Y+5, r18	; 0x05
    1930:	3e 83       	std	Y+6, r19	; 0x06
    1932:	4f 83       	std	Y+7, r20	; 0x07
    1934:	58 87       	std	Y+8, r21	; 0x08
    1936:	e9 e0       	ldi	r30, 0x09	; 9
    1938:	ee 2e       	mov	r14, r30
    193a:	f1 2c       	mov	r15, r1
    193c:	ec 0e       	add	r14, r28
    193e:	fd 1e       	adc	r15, r29
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	b7 01       	movw	r22, r14
    1946:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    194a:	8e 01       	movw	r16, r28
    194c:	0f 5e       	subi	r16, 0xEF	; 239
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	ce 01       	movw	r24, r28
    1952:	05 96       	adiw	r24, 0x05	; 5
    1954:	b8 01       	movw	r22, r16
    1956:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    195a:	8a 89       	ldd	r24, Y+18	; 0x12
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	89 27       	eor	r24, r25
    1960:	8a 8b       	std	Y+18, r24	; 0x12
    1962:	c7 01       	movw	r24, r14
    1964:	b8 01       	movw	r22, r16
    1966:	ae 01       	movw	r20, r28
    1968:	47 5e       	subi	r20, 0xE7	; 231
    196a:	5f 4f       	sbci	r21, 0xFF	; 255
    196c:	0e 94 41 0b 	call	0x1682	; 0x1682 <_fpadd_parts>
    1970:	0e 94 3d 10 	call	0x207a	; 0x207a <__pack_f>
    1974:	a0 96       	adiw	r28, 0x20	; 32
    1976:	e6 e0       	ldi	r30, 0x06	; 6
    1978:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

0000197c <__addsf3>:
    197c:	a0 e2       	ldi	r26, 0x20	; 32
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e4 ec       	ldi	r30, 0xC4	; 196
    1982:	fc e0       	ldi	r31, 0x0C	; 12
    1984:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
    1988:	69 83       	std	Y+1, r22	; 0x01
    198a:	7a 83       	std	Y+2, r23	; 0x02
    198c:	8b 83       	std	Y+3, r24	; 0x03
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	2d 83       	std	Y+5, r18	; 0x05
    1992:	3e 83       	std	Y+6, r19	; 0x06
    1994:	4f 83       	std	Y+7, r20	; 0x07
    1996:	58 87       	std	Y+8, r21	; 0x08
    1998:	f9 e0       	ldi	r31, 0x09	; 9
    199a:	ef 2e       	mov	r14, r31
    199c:	f1 2c       	mov	r15, r1
    199e:	ec 0e       	add	r14, r28
    19a0:	fd 1e       	adc	r15, r29
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	b7 01       	movw	r22, r14
    19a8:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    19ac:	8e 01       	movw	r16, r28
    19ae:	0f 5e       	subi	r16, 0xEF	; 239
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	ce 01       	movw	r24, r28
    19b4:	05 96       	adiw	r24, 0x05	; 5
    19b6:	b8 01       	movw	r22, r16
    19b8:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    19bc:	c7 01       	movw	r24, r14
    19be:	b8 01       	movw	r22, r16
    19c0:	ae 01       	movw	r20, r28
    19c2:	47 5e       	subi	r20, 0xE7	; 231
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	0e 94 41 0b 	call	0x1682	; 0x1682 <_fpadd_parts>
    19ca:	0e 94 3d 10 	call	0x207a	; 0x207a <__pack_f>
    19ce:	a0 96       	adiw	r28, 0x20	; 32
    19d0:	e6 e0       	ldi	r30, 0x06	; 6
    19d2:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

000019d6 <__mulsf3>:
    19d6:	a0 e2       	ldi	r26, 0x20	; 32
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e1 ef       	ldi	r30, 0xF1	; 241
    19dc:	fc e0       	ldi	r31, 0x0C	; 12
    19de:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
    19e2:	69 83       	std	Y+1, r22	; 0x01
    19e4:	7a 83       	std	Y+2, r23	; 0x02
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	2d 83       	std	Y+5, r18	; 0x05
    19ec:	3e 83       	std	Y+6, r19	; 0x06
    19ee:	4f 83       	std	Y+7, r20	; 0x07
    19f0:	58 87       	std	Y+8, r21	; 0x08
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	be 01       	movw	r22, r28
    19f8:	67 5f       	subi	r22, 0xF7	; 247
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1a00:	ce 01       	movw	r24, r28
    1a02:	05 96       	adiw	r24, 0x05	; 5
    1a04:	be 01       	movw	r22, r28
    1a06:	6f 5e       	subi	r22, 0xEF	; 239
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1a0e:	99 85       	ldd	r25, Y+9	; 0x09
    1a10:	92 30       	cpi	r25, 0x02	; 2
    1a12:	88 f0       	brcs	.+34     	; 0x1a36 <__mulsf3+0x60>
    1a14:	89 89       	ldd	r24, Y+17	; 0x11
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	c8 f0       	brcs	.+50     	; 0x1a4c <__mulsf3+0x76>
    1a1a:	94 30       	cpi	r25, 0x04	; 4
    1a1c:	19 f4       	brne	.+6      	; 0x1a24 <__mulsf3+0x4e>
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	51 f4       	brne	.+20     	; 0x1a36 <__mulsf3+0x60>
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <__mulsf3+0x56>
    1a24:	84 30       	cpi	r24, 0x04	; 4
    1a26:	29 f4       	brne	.+10     	; 0x1a32 <__mulsf3+0x5c>
    1a28:	92 30       	cpi	r25, 0x02	; 2
    1a2a:	81 f4       	brne	.+32     	; 0x1a4c <__mulsf3+0x76>
    1a2c:	89 ea       	ldi	r24, 0xA9	; 169
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	c6 c0       	rjmp	.+396    	; 0x1bbe <__mulsf3+0x1e8>
    1a32:	92 30       	cpi	r25, 0x02	; 2
    1a34:	49 f4       	brne	.+18     	; 0x1a48 <__mulsf3+0x72>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3c:	98 13       	cpse	r25, r24
    1a3e:	21 e0       	ldi	r18, 0x01	; 1
    1a40:	2a 87       	std	Y+10, r18	; 0x0a
    1a42:	ce 01       	movw	r24, r28
    1a44:	09 96       	adiw	r24, 0x09	; 9
    1a46:	bb c0       	rjmp	.+374    	; 0x1bbe <__mulsf3+0x1e8>
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	49 f4       	brne	.+18     	; 0x1a5e <__mulsf3+0x88>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	8a 89       	ldd	r24, Y+18	; 0x12
    1a52:	98 13       	cpse	r25, r24
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	2a 8b       	std	Y+18, r18	; 0x12
    1a58:	ce 01       	movw	r24, r28
    1a5a:	41 96       	adiw	r24, 0x11	; 17
    1a5c:	b0 c0       	rjmp	.+352    	; 0x1bbe <__mulsf3+0x1e8>
    1a5e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1a60:	3e 84       	ldd	r3, Y+14	; 0x0e
    1a62:	4f 84       	ldd	r4, Y+15	; 0x0f
    1a64:	58 88       	ldd	r5, Y+16	; 0x10
    1a66:	6d 88       	ldd	r6, Y+21	; 0x15
    1a68:	7e 88       	ldd	r7, Y+22	; 0x16
    1a6a:	8f 88       	ldd	r8, Y+23	; 0x17
    1a6c:	98 8c       	ldd	r9, Y+24	; 0x18
    1a6e:	ee 24       	eor	r14, r14
    1a70:	ff 24       	eor	r15, r15
    1a72:	87 01       	movw	r16, r14
    1a74:	aa 24       	eor	r10, r10
    1a76:	bb 24       	eor	r11, r11
    1a78:	65 01       	movw	r12, r10
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	e0 e0       	ldi	r30, 0x00	; 0
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	c1 01       	movw	r24, r2
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	90 70       	andi	r25, 0x00	; 0
    1a8c:	89 2b       	or	r24, r25
    1a8e:	e9 f0       	breq	.+58     	; 0x1aca <__mulsf3+0xf4>
    1a90:	e6 0c       	add	r14, r6
    1a92:	f7 1c       	adc	r15, r7
    1a94:	08 1d       	adc	r16, r8
    1a96:	19 1d       	adc	r17, r9
    1a98:	9a 01       	movw	r18, r20
    1a9a:	ab 01       	movw	r20, r22
    1a9c:	2a 0d       	add	r18, r10
    1a9e:	3b 1d       	adc	r19, r11
    1aa0:	4c 1d       	adc	r20, r12
    1aa2:	5d 1d       	adc	r21, r13
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 14       	cp	r14, r6
    1aae:	f7 04       	cpc	r15, r7
    1ab0:	08 05       	cpc	r16, r8
    1ab2:	19 05       	cpc	r17, r9
    1ab4:	20 f4       	brcc	.+8      	; 0x1abe <__mulsf3+0xe8>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	ba 01       	movw	r22, r20
    1ac0:	a9 01       	movw	r20, r18
    1ac2:	48 0f       	add	r20, r24
    1ac4:	59 1f       	adc	r21, r25
    1ac6:	6a 1f       	adc	r22, r26
    1ac8:	7b 1f       	adc	r23, r27
    1aca:	aa 0c       	add	r10, r10
    1acc:	bb 1c       	adc	r11, r11
    1ace:	cc 1c       	adc	r12, r12
    1ad0:	dd 1c       	adc	r13, r13
    1ad2:	97 fe       	sbrs	r9, 7
    1ad4:	08 c0       	rjmp	.+16     	; 0x1ae6 <__mulsf3+0x110>
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	a0 e0       	ldi	r26, 0x00	; 0
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	a8 2a       	or	r10, r24
    1ae0:	b9 2a       	or	r11, r25
    1ae2:	ca 2a       	or	r12, r26
    1ae4:	db 2a       	or	r13, r27
    1ae6:	31 96       	adiw	r30, 0x01	; 1
    1ae8:	e0 32       	cpi	r30, 0x20	; 32
    1aea:	f1 05       	cpc	r31, r1
    1aec:	49 f0       	breq	.+18     	; 0x1b00 <__mulsf3+0x12a>
    1aee:	66 0c       	add	r6, r6
    1af0:	77 1c       	adc	r7, r7
    1af2:	88 1c       	adc	r8, r8
    1af4:	99 1c       	adc	r9, r9
    1af6:	56 94       	lsr	r5
    1af8:	47 94       	ror	r4
    1afa:	37 94       	ror	r3
    1afc:	27 94       	ror	r2
    1afe:	c3 cf       	rjmp	.-122    	; 0x1a86 <__mulsf3+0xb0>
    1b00:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b02:	ea 89       	ldd	r30, Y+18	; 0x12
    1b04:	2b 89       	ldd	r18, Y+19	; 0x13
    1b06:	3c 89       	ldd	r19, Y+20	; 0x14
    1b08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b0c:	28 0f       	add	r18, r24
    1b0e:	39 1f       	adc	r19, r25
    1b10:	2e 5f       	subi	r18, 0xFE	; 254
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	17 c0       	rjmp	.+46     	; 0x1b44 <__mulsf3+0x16e>
    1b16:	ca 01       	movw	r24, r20
    1b18:	81 70       	andi	r24, 0x01	; 1
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	89 2b       	or	r24, r25
    1b1e:	61 f0       	breq	.+24     	; 0x1b38 <__mulsf3+0x162>
    1b20:	16 95       	lsr	r17
    1b22:	07 95       	ror	r16
    1b24:	f7 94       	ror	r15
    1b26:	e7 94       	ror	r14
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e8       	ldi	r27, 0x80	; 128
    1b30:	e8 2a       	or	r14, r24
    1b32:	f9 2a       	or	r15, r25
    1b34:	0a 2b       	or	r16, r26
    1b36:	1b 2b       	or	r17, r27
    1b38:	76 95       	lsr	r23
    1b3a:	67 95       	ror	r22
    1b3c:	57 95       	ror	r21
    1b3e:	47 95       	ror	r20
    1b40:	2f 5f       	subi	r18, 0xFF	; 255
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	77 fd       	sbrc	r23, 7
    1b46:	e7 cf       	rjmp	.-50     	; 0x1b16 <__mulsf3+0x140>
    1b48:	0c c0       	rjmp	.+24     	; 0x1b62 <__mulsf3+0x18c>
    1b4a:	44 0f       	add	r20, r20
    1b4c:	55 1f       	adc	r21, r21
    1b4e:	66 1f       	adc	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	17 fd       	sbrc	r17, 7
    1b54:	41 60       	ori	r20, 0x01	; 1
    1b56:	ee 0c       	add	r14, r14
    1b58:	ff 1c       	adc	r15, r15
    1b5a:	00 1f       	adc	r16, r16
    1b5c:	11 1f       	adc	r17, r17
    1b5e:	21 50       	subi	r18, 0x01	; 1
    1b60:	30 40       	sbci	r19, 0x00	; 0
    1b62:	40 30       	cpi	r20, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	59 07       	cpc	r21, r25
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	69 07       	cpc	r22, r25
    1b6c:	90 e4       	ldi	r25, 0x40	; 64
    1b6e:	79 07       	cpc	r23, r25
    1b70:	60 f3       	brcs	.-40     	; 0x1b4a <__mulsf3+0x174>
    1b72:	2b 8f       	std	Y+27, r18	; 0x1b
    1b74:	3c 8f       	std	Y+28, r19	; 0x1c
    1b76:	db 01       	movw	r26, r22
    1b78:	ca 01       	movw	r24, r20
    1b7a:	8f 77       	andi	r24, 0x7F	; 127
    1b7c:	90 70       	andi	r25, 0x00	; 0
    1b7e:	a0 70       	andi	r26, 0x00	; 0
    1b80:	b0 70       	andi	r27, 0x00	; 0
    1b82:	80 34       	cpi	r24, 0x40	; 64
    1b84:	91 05       	cpc	r25, r1
    1b86:	a1 05       	cpc	r26, r1
    1b88:	b1 05       	cpc	r27, r1
    1b8a:	61 f4       	brne	.+24     	; 0x1ba4 <__mulsf3+0x1ce>
    1b8c:	47 fd       	sbrc	r20, 7
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <__mulsf3+0x1ce>
    1b90:	e1 14       	cp	r14, r1
    1b92:	f1 04       	cpc	r15, r1
    1b94:	01 05       	cpc	r16, r1
    1b96:	11 05       	cpc	r17, r1
    1b98:	29 f0       	breq	.+10     	; 0x1ba4 <__mulsf3+0x1ce>
    1b9a:	40 5c       	subi	r20, 0xC0	; 192
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	6f 4f       	sbci	r22, 0xFF	; 255
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	40 78       	andi	r20, 0x80	; 128
    1ba4:	1a 8e       	std	Y+26, r1	; 0x1a
    1ba6:	fe 17       	cp	r31, r30
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <__mulsf3+0x1d8>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	8a 8f       	std	Y+26, r24	; 0x1a
    1bae:	4d 8f       	std	Y+29, r20	; 0x1d
    1bb0:	5e 8f       	std	Y+30, r21	; 0x1e
    1bb2:	6f 8f       	std	Y+31, r22	; 0x1f
    1bb4:	78 a3       	std	Y+32, r23	; 0x20
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	89 8f       	std	Y+25, r24	; 0x19
    1bba:	ce 01       	movw	r24, r28
    1bbc:	49 96       	adiw	r24, 0x19	; 25
    1bbe:	0e 94 3d 10 	call	0x207a	; 0x207a <__pack_f>
    1bc2:	a0 96       	adiw	r28, 0x20	; 32
    1bc4:	e2 e1       	ldi	r30, 0x12	; 18
    1bc6:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

00001bca <__divsf3>:
    1bca:	a8 e1       	ldi	r26, 0x18	; 24
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb ee       	ldi	r30, 0xEB	; 235
    1bd0:	fd e0       	ldi	r31, 0x0D	; 13
    1bd2:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__+0x10>
    1bd6:	69 83       	std	Y+1, r22	; 0x01
    1bd8:	7a 83       	std	Y+2, r23	; 0x02
    1bda:	8b 83       	std	Y+3, r24	; 0x03
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	2d 83       	std	Y+5, r18	; 0x05
    1be0:	3e 83       	std	Y+6, r19	; 0x06
    1be2:	4f 83       	std	Y+7, r20	; 0x07
    1be4:	58 87       	std	Y+8, r21	; 0x08
    1be6:	b9 e0       	ldi	r27, 0x09	; 9
    1be8:	eb 2e       	mov	r14, r27
    1bea:	f1 2c       	mov	r15, r1
    1bec:	ec 0e       	add	r14, r28
    1bee:	fd 1e       	adc	r15, r29
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	b7 01       	movw	r22, r14
    1bf6:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1bfa:	8e 01       	movw	r16, r28
    1bfc:	0f 5e       	subi	r16, 0xEF	; 239
    1bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1c00:	ce 01       	movw	r24, r28
    1c02:	05 96       	adiw	r24, 0x05	; 5
    1c04:	b8 01       	movw	r22, r16
    1c06:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1c0a:	29 85       	ldd	r18, Y+9	; 0x09
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <__divsf3+0x48>
    1c10:	7e c0       	rjmp	.+252    	; 0x1d0e <__divsf3+0x144>
    1c12:	39 89       	ldd	r19, Y+17	; 0x11
    1c14:	32 30       	cpi	r19, 0x02	; 2
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <__divsf3+0x52>
    1c18:	b8 01       	movw	r22, r16
    1c1a:	7c c0       	rjmp	.+248    	; 0x1d14 <__divsf3+0x14a>
    1c1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c20:	89 27       	eor	r24, r25
    1c22:	8a 87       	std	Y+10, r24	; 0x0a
    1c24:	24 30       	cpi	r18, 0x04	; 4
    1c26:	11 f0       	breq	.+4      	; 0x1c2c <__divsf3+0x62>
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 f4       	brne	.+12     	; 0x1c38 <__divsf3+0x6e>
    1c2c:	23 17       	cp	r18, r19
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <__divsf3+0x68>
    1c30:	6e c0       	rjmp	.+220    	; 0x1d0e <__divsf3+0x144>
    1c32:	69 ea       	ldi	r22, 0xA9	; 169
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	6e c0       	rjmp	.+220    	; 0x1d14 <__divsf3+0x14a>
    1c38:	34 30       	cpi	r19, 0x04	; 4
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <__divsf3+0x80>
    1c3c:	1d 86       	std	Y+13, r1	; 0x0d
    1c3e:	1e 86       	std	Y+14, r1	; 0x0e
    1c40:	1f 86       	std	Y+15, r1	; 0x0f
    1c42:	18 8a       	std	Y+16, r1	; 0x10
    1c44:	1c 86       	std	Y+12, r1	; 0x0c
    1c46:	1b 86       	std	Y+11, r1	; 0x0b
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <__divsf3+0x88>
    1c4a:	32 30       	cpi	r19, 0x02	; 2
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <__divsf3+0x8c>
    1c4e:	84 e0       	ldi	r24, 0x04	; 4
    1c50:	89 87       	std	Y+9, r24	; 0x09
    1c52:	b7 01       	movw	r22, r14
    1c54:	5f c0       	rjmp	.+190    	; 0x1d14 <__divsf3+0x14a>
    1c56:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c58:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	28 1b       	sub	r18, r24
    1c60:	39 0b       	sbc	r19, r25
    1c62:	3c 87       	std	Y+12, r19	; 0x0c
    1c64:	2b 87       	std	Y+11, r18	; 0x0b
    1c66:	ed 84       	ldd	r14, Y+13	; 0x0d
    1c68:	fe 84       	ldd	r15, Y+14	; 0x0e
    1c6a:	0f 85       	ldd	r16, Y+15	; 0x0f
    1c6c:	18 89       	ldd	r17, Y+16	; 0x10
    1c6e:	ad 88       	ldd	r10, Y+21	; 0x15
    1c70:	be 88       	ldd	r11, Y+22	; 0x16
    1c72:	cf 88       	ldd	r12, Y+23	; 0x17
    1c74:	d8 8c       	ldd	r13, Y+24	; 0x18
    1c76:	ea 14       	cp	r14, r10
    1c78:	fb 04       	cpc	r15, r11
    1c7a:	0c 05       	cpc	r16, r12
    1c7c:	1d 05       	cpc	r17, r13
    1c7e:	40 f4       	brcc	.+16     	; 0x1c90 <__divsf3+0xc6>
    1c80:	ee 0c       	add	r14, r14
    1c82:	ff 1c       	adc	r15, r15
    1c84:	00 1f       	adc	r16, r16
    1c86:	11 1f       	adc	r17, r17
    1c88:	21 50       	subi	r18, 0x01	; 1
    1c8a:	30 40       	sbci	r19, 0x00	; 0
    1c8c:	3c 87       	std	Y+12, r19	; 0x0c
    1c8e:	2b 87       	std	Y+11, r18	; 0x0b
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a0 e0       	ldi	r26, 0x00	; 0
    1c9e:	b0 e4       	ldi	r27, 0x40	; 64
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	ea 14       	cp	r14, r10
    1ca6:	fb 04       	cpc	r15, r11
    1ca8:	0c 05       	cpc	r16, r12
    1caa:	1d 05       	cpc	r17, r13
    1cac:	40 f0       	brcs	.+16     	; 0x1cbe <__divsf3+0xf4>
    1cae:	28 2b       	or	r18, r24
    1cb0:	39 2b       	or	r19, r25
    1cb2:	4a 2b       	or	r20, r26
    1cb4:	5b 2b       	or	r21, r27
    1cb6:	ea 18       	sub	r14, r10
    1cb8:	fb 08       	sbc	r15, r11
    1cba:	0c 09       	sbc	r16, r12
    1cbc:	1d 09       	sbc	r17, r13
    1cbe:	b6 95       	lsr	r27
    1cc0:	a7 95       	ror	r26
    1cc2:	97 95       	ror	r25
    1cc4:	87 95       	ror	r24
    1cc6:	ee 0c       	add	r14, r14
    1cc8:	ff 1c       	adc	r15, r15
    1cca:	00 1f       	adc	r16, r16
    1ccc:	11 1f       	adc	r17, r17
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	6f 31       	cpi	r22, 0x1F	; 31
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	31 f7       	brne	.-52     	; 0x1ca4 <__divsf3+0xda>
    1cd8:	da 01       	movw	r26, r20
    1cda:	c9 01       	movw	r24, r18
    1cdc:	8f 77       	andi	r24, 0x7F	; 127
    1cde:	90 70       	andi	r25, 0x00	; 0
    1ce0:	a0 70       	andi	r26, 0x00	; 0
    1ce2:	b0 70       	andi	r27, 0x00	; 0
    1ce4:	80 34       	cpi	r24, 0x40	; 64
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	a1 05       	cpc	r26, r1
    1cea:	b1 05       	cpc	r27, r1
    1cec:	61 f4       	brne	.+24     	; 0x1d06 <__divsf3+0x13c>
    1cee:	27 fd       	sbrc	r18, 7
    1cf0:	0a c0       	rjmp	.+20     	; 0x1d06 <__divsf3+0x13c>
    1cf2:	e1 14       	cp	r14, r1
    1cf4:	f1 04       	cpc	r15, r1
    1cf6:	01 05       	cpc	r16, r1
    1cf8:	11 05       	cpc	r17, r1
    1cfa:	29 f0       	breq	.+10     	; 0x1d06 <__divsf3+0x13c>
    1cfc:	20 5c       	subi	r18, 0xC0	; 192
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	4f 4f       	sbci	r20, 0xFF	; 255
    1d02:	5f 4f       	sbci	r21, 0xFF	; 255
    1d04:	20 78       	andi	r18, 0x80	; 128
    1d06:	2d 87       	std	Y+13, r18	; 0x0d
    1d08:	3e 87       	std	Y+14, r19	; 0x0e
    1d0a:	4f 87       	std	Y+15, r20	; 0x0f
    1d0c:	58 8b       	std	Y+16, r21	; 0x10
    1d0e:	be 01       	movw	r22, r28
    1d10:	67 5f       	subi	r22, 0xF7	; 247
    1d12:	7f 4f       	sbci	r23, 0xFF	; 255
    1d14:	cb 01       	movw	r24, r22
    1d16:	0e 94 3d 10 	call	0x207a	; 0x207a <__pack_f>
    1d1a:	68 96       	adiw	r28, 0x18	; 24
    1d1c:	ea e0       	ldi	r30, 0x0A	; 10
    1d1e:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__+0x10>

00001d22 <__gtsf2>:
    1d22:	a8 e1       	ldi	r26, 0x18	; 24
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e9       	ldi	r30, 0x97	; 151
    1d28:	fe e0       	ldi	r31, 0x0E	; 14
    1d2a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
    1d2e:	69 83       	std	Y+1, r22	; 0x01
    1d30:	7a 83       	std	Y+2, r23	; 0x02
    1d32:	8b 83       	std	Y+3, r24	; 0x03
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	2d 83       	std	Y+5, r18	; 0x05
    1d38:	3e 83       	std	Y+6, r19	; 0x06
    1d3a:	4f 83       	std	Y+7, r20	; 0x07
    1d3c:	58 87       	std	Y+8, r21	; 0x08
    1d3e:	89 e0       	ldi	r24, 0x09	; 9
    1d40:	e8 2e       	mov	r14, r24
    1d42:	f1 2c       	mov	r15, r1
    1d44:	ec 0e       	add	r14, r28
    1d46:	fd 1e       	adc	r15, r29
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	b7 01       	movw	r22, r14
    1d4e:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1d52:	8e 01       	movw	r16, r28
    1d54:	0f 5e       	subi	r16, 0xEF	; 239
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	ce 01       	movw	r24, r28
    1d5a:	05 96       	adiw	r24, 0x05	; 5
    1d5c:	b8 01       	movw	r22, r16
    1d5e:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	40 f0       	brcs	.+16     	; 0x1d78 <__gtsf2+0x56>
    1d68:	89 89       	ldd	r24, Y+17	; 0x11
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	28 f0       	brcs	.+10     	; 0x1d78 <__gtsf2+0x56>
    1d6e:	c7 01       	movw	r24, r14
    1d70:	b8 01       	movw	r22, r16
    1d72:	0e 94 8a 11 	call	0x2314	; 0x2314 <__fpcmp_parts_f>
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <__gtsf2+0x58>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	68 96       	adiw	r28, 0x18	; 24
    1d7c:	e6 e0       	ldi	r30, 0x06	; 6
    1d7e:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

00001d82 <__gesf2>:
    1d82:	a8 e1       	ldi	r26, 0x18	; 24
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e7 ec       	ldi	r30, 0xC7	; 199
    1d88:	fe e0       	ldi	r31, 0x0E	; 14
    1d8a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
    1d8e:	69 83       	std	Y+1, r22	; 0x01
    1d90:	7a 83       	std	Y+2, r23	; 0x02
    1d92:	8b 83       	std	Y+3, r24	; 0x03
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	2d 83       	std	Y+5, r18	; 0x05
    1d98:	3e 83       	std	Y+6, r19	; 0x06
    1d9a:	4f 83       	std	Y+7, r20	; 0x07
    1d9c:	58 87       	std	Y+8, r21	; 0x08
    1d9e:	89 e0       	ldi	r24, 0x09	; 9
    1da0:	e8 2e       	mov	r14, r24
    1da2:	f1 2c       	mov	r15, r1
    1da4:	ec 0e       	add	r14, r28
    1da6:	fd 1e       	adc	r15, r29
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	b7 01       	movw	r22, r14
    1dae:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1db2:	8e 01       	movw	r16, r28
    1db4:	0f 5e       	subi	r16, 0xEF	; 239
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	ce 01       	movw	r24, r28
    1dba:	05 96       	adiw	r24, 0x05	; 5
    1dbc:	b8 01       	movw	r22, r16
    1dbe:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	40 f0       	brcs	.+16     	; 0x1dd8 <__gesf2+0x56>
    1dc8:	89 89       	ldd	r24, Y+17	; 0x11
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	28 f0       	brcs	.+10     	; 0x1dd8 <__gesf2+0x56>
    1dce:	c7 01       	movw	r24, r14
    1dd0:	b8 01       	movw	r22, r16
    1dd2:	0e 94 8a 11 	call	0x2314	; 0x2314 <__fpcmp_parts_f>
    1dd6:	01 c0       	rjmp	.+2      	; 0x1dda <__gesf2+0x58>
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	68 96       	adiw	r28, 0x18	; 24
    1ddc:	e6 e0       	ldi	r30, 0x06	; 6
    1dde:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

00001de2 <__ltsf2>:
    1de2:	a8 e1       	ldi	r26, 0x18	; 24
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e7 ef       	ldi	r30, 0xF7	; 247
    1de8:	fe e0       	ldi	r31, 0x0E	; 14
    1dea:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
    1dee:	69 83       	std	Y+1, r22	; 0x01
    1df0:	7a 83       	std	Y+2, r23	; 0x02
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	2d 83       	std	Y+5, r18	; 0x05
    1df8:	3e 83       	std	Y+6, r19	; 0x06
    1dfa:	4f 83       	std	Y+7, r20	; 0x07
    1dfc:	58 87       	std	Y+8, r21	; 0x08
    1dfe:	89 e0       	ldi	r24, 0x09	; 9
    1e00:	e8 2e       	mov	r14, r24
    1e02:	f1 2c       	mov	r15, r1
    1e04:	ec 0e       	add	r14, r28
    1e06:	fd 1e       	adc	r15, r29
    1e08:	ce 01       	movw	r24, r28
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1e12:	8e 01       	movw	r16, r28
    1e14:	0f 5e       	subi	r16, 0xEF	; 239
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	ce 01       	movw	r24, r28
    1e1a:	05 96       	adiw	r24, 0x05	; 5
    1e1c:	b8 01       	movw	r22, r16
    1e1e:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	40 f0       	brcs	.+16     	; 0x1e38 <__ltsf2+0x56>
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	28 f0       	brcs	.+10     	; 0x1e38 <__ltsf2+0x56>
    1e2e:	c7 01       	movw	r24, r14
    1e30:	b8 01       	movw	r22, r16
    1e32:	0e 94 8a 11 	call	0x2314	; 0x2314 <__fpcmp_parts_f>
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <__ltsf2+0x58>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	68 96       	adiw	r28, 0x18	; 24
    1e3c:	e6 e0       	ldi	r30, 0x06	; 6
    1e3e:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

00001e42 <__fixsfsi>:
    1e42:	ac e0       	ldi	r26, 0x0C	; 12
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e7 e2       	ldi	r30, 0x27	; 39
    1e48:	ff e0       	ldi	r31, 0x0F	; 15
    1e4a:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__+0x20>
    1e4e:	69 83       	std	Y+1, r22	; 0x01
    1e50:	7a 83       	std	Y+2, r23	; 0x02
    1e52:	8b 83       	std	Y+3, r24	; 0x03
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6b 5f       	subi	r22, 0xFB	; 251
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	0e 94 12 11 	call	0x2224	; 0x2224 <__unpack_f>
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	61 f1       	breq	.+88     	; 0x1ec2 <__fixsfsi+0x80>
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	50 f1       	brcs	.+84     	; 0x1ec2 <__fixsfsi+0x80>
    1e6e:	84 30       	cpi	r24, 0x04	; 4
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <__fixsfsi+0x38>
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	88 23       	and	r24, r24
    1e76:	51 f1       	breq	.+84     	; 0x1ecc <__fixsfsi+0x8a>
    1e78:	2e c0       	rjmp	.+92     	; 0x1ed6 <__fixsfsi+0x94>
    1e7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e7c:	38 85       	ldd	r19, Y+8	; 0x08
    1e7e:	37 fd       	sbrc	r19, 7
    1e80:	20 c0       	rjmp	.+64     	; 0x1ec2 <__fixsfsi+0x80>
    1e82:	6e 81       	ldd	r22, Y+6	; 0x06
    1e84:	2f 31       	cpi	r18, 0x1F	; 31
    1e86:	31 05       	cpc	r19, r1
    1e88:	1c f0       	brlt	.+6      	; 0x1e90 <__fixsfsi+0x4e>
    1e8a:	66 23       	and	r22, r22
    1e8c:	f9 f0       	breq	.+62     	; 0x1ecc <__fixsfsi+0x8a>
    1e8e:	23 c0       	rjmp	.+70     	; 0x1ed6 <__fixsfsi+0x94>
    1e90:	8e e1       	ldi	r24, 0x1E	; 30
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	82 1b       	sub	r24, r18
    1e96:	93 0b       	sbc	r25, r19
    1e98:	29 85       	ldd	r18, Y+9	; 0x09
    1e9a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e9c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e9e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <__fixsfsi+0x68>
    1ea2:	56 95       	lsr	r21
    1ea4:	47 95       	ror	r20
    1ea6:	37 95       	ror	r19
    1ea8:	27 95       	ror	r18
    1eaa:	8a 95       	dec	r24
    1eac:	d2 f7       	brpl	.-12     	; 0x1ea2 <__fixsfsi+0x60>
    1eae:	66 23       	and	r22, r22
    1eb0:	b1 f0       	breq	.+44     	; 0x1ede <__fixsfsi+0x9c>
    1eb2:	50 95       	com	r21
    1eb4:	40 95       	com	r20
    1eb6:	30 95       	com	r19
    1eb8:	21 95       	neg	r18
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <__fixsfsi+0x9c>
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <__fixsfsi+0x9c>
    1ecc:	2f ef       	ldi	r18, 0xFF	; 255
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f ef       	ldi	r20, 0xFF	; 255
    1ed2:	5f e7       	ldi	r21, 0x7F	; 127
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <__fixsfsi+0x9c>
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	50 e8       	ldi	r21, 0x80	; 128
    1ede:	b9 01       	movw	r22, r18
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	2c 96       	adiw	r28, 0x0c	; 12
    1ee4:	e2 e0       	ldi	r30, 0x02	; 2
    1ee6:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__+0x20>

00001eea <__floatunsisf>:
    1eea:	a8 e0       	ldi	r26, 0x08	; 8
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e7       	ldi	r30, 0x7B	; 123
    1ef0:	ff e0       	ldi	r31, 0x0F	; 15
    1ef2:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__+0x10>
    1ef6:	7b 01       	movw	r14, r22
    1ef8:	8c 01       	movw	r16, r24
    1efa:	61 15       	cp	r22, r1
    1efc:	71 05       	cpc	r23, r1
    1efe:	81 05       	cpc	r24, r1
    1f00:	91 05       	cpc	r25, r1
    1f02:	19 f4       	brne	.+6      	; 0x1f0a <__floatunsisf+0x20>
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	60 c0       	rjmp	.+192    	; 0x1fca <__floatunsisf+0xe0>
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	8e e1       	ldi	r24, 0x1E	; 30
    1f10:	c8 2e       	mov	r12, r24
    1f12:	d1 2c       	mov	r13, r1
    1f14:	dc 82       	std	Y+4, r13	; 0x04
    1f16:	cb 82       	std	Y+3, r12	; 0x03
    1f18:	ed 82       	std	Y+5, r14	; 0x05
    1f1a:	fe 82       	std	Y+6, r15	; 0x06
    1f1c:	0f 83       	std	Y+7, r16	; 0x07
    1f1e:	18 87       	std	Y+8, r17	; 0x08
    1f20:	c8 01       	movw	r24, r16
    1f22:	b7 01       	movw	r22, r14
    1f24:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__clzsi2>
    1f28:	fc 01       	movw	r30, r24
    1f2a:	31 97       	sbiw	r30, 0x01	; 1
    1f2c:	f7 ff       	sbrs	r31, 7
    1f2e:	3b c0       	rjmp	.+118    	; 0x1fa6 <__floatunsisf+0xbc>
    1f30:	22 27       	eor	r18, r18
    1f32:	33 27       	eor	r19, r19
    1f34:	2e 1b       	sub	r18, r30
    1f36:	3f 0b       	sbc	r19, r31
    1f38:	57 01       	movw	r10, r14
    1f3a:	68 01       	movw	r12, r16
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <__floatunsisf+0x5e>
    1f40:	d6 94       	lsr	r13
    1f42:	c7 94       	ror	r12
    1f44:	b7 94       	ror	r11
    1f46:	a7 94       	ror	r10
    1f48:	0a 94       	dec	r0
    1f4a:	d2 f7       	brpl	.-12     	; 0x1f40 <__floatunsisf+0x56>
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <__floatunsisf+0x7c>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	aa 1f       	adc	r26, r26
    1f64:	bb 1f       	adc	r27, r27
    1f66:	2a 95       	dec	r18
    1f68:	d2 f7       	brpl	.-12     	; 0x1f5e <__floatunsisf+0x74>
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	a1 09       	sbc	r26, r1
    1f6e:	b1 09       	sbc	r27, r1
    1f70:	8e 21       	and	r24, r14
    1f72:	9f 21       	and	r25, r15
    1f74:	a0 23       	and	r26, r16
    1f76:	b1 23       	and	r27, r17
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	a1 05       	cpc	r26, r1
    1f7c:	b1 05       	cpc	r27, r1
    1f7e:	21 f0       	breq	.+8      	; 0x1f88 <__floatunsisf+0x9e>
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	4a 29       	or	r20, r10
    1f8a:	5b 29       	or	r21, r11
    1f8c:	6c 29       	or	r22, r12
    1f8e:	7d 29       	or	r23, r13
    1f90:	4d 83       	std	Y+5, r20	; 0x05
    1f92:	5e 83       	std	Y+6, r21	; 0x06
    1f94:	6f 83       	std	Y+7, r22	; 0x07
    1f96:	78 87       	std	Y+8, r23	; 0x08
    1f98:	8e e1       	ldi	r24, 0x1E	; 30
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	8e 1b       	sub	r24, r30
    1f9e:	9f 0b       	sbc	r25, r31
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	12 c0       	rjmp	.+36     	; 0x1fca <__floatunsisf+0xe0>
    1fa6:	30 97       	sbiw	r30, 0x00	; 0
    1fa8:	81 f0       	breq	.+32     	; 0x1fca <__floatunsisf+0xe0>
    1faa:	0e 2e       	mov	r0, r30
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <__floatunsisf+0xcc>
    1fae:	ee 0c       	add	r14, r14
    1fb0:	ff 1c       	adc	r15, r15
    1fb2:	00 1f       	adc	r16, r16
    1fb4:	11 1f       	adc	r17, r17
    1fb6:	0a 94       	dec	r0
    1fb8:	d2 f7       	brpl	.-12     	; 0x1fae <__floatunsisf+0xc4>
    1fba:	ed 82       	std	Y+5, r14	; 0x05
    1fbc:	fe 82       	std	Y+6, r15	; 0x06
    1fbe:	0f 83       	std	Y+7, r16	; 0x07
    1fc0:	18 87       	std	Y+8, r17	; 0x08
    1fc2:	ce 1a       	sub	r12, r30
    1fc4:	df 0a       	sbc	r13, r31
    1fc6:	dc 82       	std	Y+4, r13	; 0x04
    1fc8:	cb 82       	std	Y+3, r12	; 0x03
    1fca:	1a 82       	std	Y+2, r1	; 0x02
    1fcc:	ce 01       	movw	r24, r28
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	0e 94 3d 10 	call	0x207a	; 0x207a <__pack_f>
    1fd4:	28 96       	adiw	r28, 0x08	; 8
    1fd6:	ea e0       	ldi	r30, 0x0A	; 10
    1fd8:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__+0x10>

00001fdc <__clzsi2>:
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	7b 01       	movw	r14, r22
    1fe6:	8c 01       	movw	r16, r24
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	e8 16       	cp	r14, r24
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	f8 06       	cpc	r15, r24
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	08 07       	cpc	r16, r24
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	18 07       	cpc	r17, r24
    1ff8:	88 f4       	brcc	.+34     	; 0x201c <__clzsi2+0x40>
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	e8 16       	cp	r14, r24
    1ffe:	f1 04       	cpc	r15, r1
    2000:	01 05       	cpc	r16, r1
    2002:	11 05       	cpc	r17, r1
    2004:	31 f0       	breq	.+12     	; 0x2012 <__clzsi2+0x36>
    2006:	28 f0       	brcs	.+10     	; 0x2012 <__clzsi2+0x36>
    2008:	88 e0       	ldi	r24, 0x08	; 8
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e0       	ldi	r26, 0x00	; 0
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	17 c0       	rjmp	.+46     	; 0x2040 <__clzsi2+0x64>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	12 c0       	rjmp	.+36     	; 0x2040 <__clzsi2+0x64>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	e8 16       	cp	r14, r24
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	f8 06       	cpc	r15, r24
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	08 07       	cpc	r16, r24
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	18 07       	cpc	r17, r24
    202c:	28 f0       	brcs	.+10     	; 0x2038 <__clzsi2+0x5c>
    202e:	88 e1       	ldi	r24, 0x18	; 24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e0       	ldi	r26, 0x00	; 0
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <__clzsi2+0x64>
    2038:	80 e1       	ldi	r24, 0x10	; 16
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 e0       	ldi	r26, 0x00	; 0
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	20 e2       	ldi	r18, 0x20	; 32
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	28 1b       	sub	r18, r24
    204a:	39 0b       	sbc	r19, r25
    204c:	4a 0b       	sbc	r20, r26
    204e:	5b 0b       	sbc	r21, r27
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__clzsi2+0x7e>
    2052:	16 95       	lsr	r17
    2054:	07 95       	ror	r16
    2056:	f7 94       	ror	r15
    2058:	e7 94       	ror	r14
    205a:	8a 95       	dec	r24
    205c:	d2 f7       	brpl	.-12     	; 0x2052 <__clzsi2+0x76>
    205e:	f7 01       	movw	r30, r14
    2060:	ef 54       	subi	r30, 0x4F	; 79
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	28 1b       	sub	r18, r24
    2068:	31 09       	sbc	r19, r1
    206a:	41 09       	sbc	r20, r1
    206c:	51 09       	sbc	r21, r1
    206e:	c9 01       	movw	r24, r18
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ff 90       	pop	r15
    2076:	ef 90       	pop	r14
    2078:	08 95       	ret

0000207a <__pack_f>:
    207a:	df 92       	push	r13
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	fc 01       	movw	r30, r24
    2086:	e4 80       	ldd	r14, Z+4	; 0x04
    2088:	f5 80       	ldd	r15, Z+5	; 0x05
    208a:	06 81       	ldd	r16, Z+6	; 0x06
    208c:	17 81       	ldd	r17, Z+7	; 0x07
    208e:	d1 80       	ldd	r13, Z+1	; 0x01
    2090:	80 81       	ld	r24, Z
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	48 f4       	brcc	.+18     	; 0x20a8 <__pack_f+0x2e>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e1       	ldi	r26, 0x10	; 16
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e8 2a       	or	r14, r24
    20a0:	f9 2a       	or	r15, r25
    20a2:	0a 2b       	or	r16, r26
    20a4:	1b 2b       	or	r17, r27
    20a6:	a5 c0       	rjmp	.+330    	; 0x21f2 <__pack_f+0x178>
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	09 f4       	brne	.+2      	; 0x20ae <__pack_f+0x34>
    20ac:	9f c0       	rjmp	.+318    	; 0x21ec <__pack_f+0x172>
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	21 f4       	brne	.+8      	; 0x20ba <__pack_f+0x40>
    20b2:	ee 24       	eor	r14, r14
    20b4:	ff 24       	eor	r15, r15
    20b6:	87 01       	movw	r16, r14
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <__pack_f+0x4a>
    20ba:	e1 14       	cp	r14, r1
    20bc:	f1 04       	cpc	r15, r1
    20be:	01 05       	cpc	r16, r1
    20c0:	11 05       	cpc	r17, r1
    20c2:	19 f4       	brne	.+6      	; 0x20ca <__pack_f+0x50>
    20c4:	e0 e0       	ldi	r30, 0x00	; 0
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	96 c0       	rjmp	.+300    	; 0x21f6 <__pack_f+0x17c>
    20ca:	62 81       	ldd	r22, Z+2	; 0x02
    20cc:	73 81       	ldd	r23, Z+3	; 0x03
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	62 38       	cpi	r22, 0x82	; 130
    20d2:	79 07       	cpc	r23, r25
    20d4:	0c f0       	brlt	.+2      	; 0x20d8 <__pack_f+0x5e>
    20d6:	5b c0       	rjmp	.+182    	; 0x218e <__pack_f+0x114>
    20d8:	22 e8       	ldi	r18, 0x82	; 130
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	26 1b       	sub	r18, r22
    20de:	37 0b       	sbc	r19, r23
    20e0:	2a 31       	cpi	r18, 0x1A	; 26
    20e2:	31 05       	cpc	r19, r1
    20e4:	2c f0       	brlt	.+10     	; 0x20f0 <__pack_f+0x76>
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	2a c0       	rjmp	.+84     	; 0x2144 <__pack_f+0xca>
    20f0:	b8 01       	movw	r22, r16
    20f2:	a7 01       	movw	r20, r14
    20f4:	02 2e       	mov	r0, r18
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <__pack_f+0x86>
    20f8:	76 95       	lsr	r23
    20fa:	67 95       	ror	r22
    20fc:	57 95       	ror	r21
    20fe:	47 95       	ror	r20
    2100:	0a 94       	dec	r0
    2102:	d2 f7       	brpl	.-12     	; 0x20f8 <__pack_f+0x7e>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <__pack_f+0x9c>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	2a 95       	dec	r18
    2118:	d2 f7       	brpl	.-12     	; 0x210e <__pack_f+0x94>
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	a1 09       	sbc	r26, r1
    211e:	b1 09       	sbc	r27, r1
    2120:	8e 21       	and	r24, r14
    2122:	9f 21       	and	r25, r15
    2124:	a0 23       	and	r26, r16
    2126:	b1 23       	and	r27, r17
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	a1 05       	cpc	r26, r1
    212c:	b1 05       	cpc	r27, r1
    212e:	21 f0       	breq	.+8      	; 0x2138 <__pack_f+0xbe>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	9a 01       	movw	r18, r20
    213a:	ab 01       	movw	r20, r22
    213c:	28 2b       	or	r18, r24
    213e:	39 2b       	or	r19, r25
    2140:	4a 2b       	or	r20, r26
    2142:	5b 2b       	or	r21, r27
    2144:	da 01       	movw	r26, r20
    2146:	c9 01       	movw	r24, r18
    2148:	8f 77       	andi	r24, 0x7F	; 127
    214a:	90 70       	andi	r25, 0x00	; 0
    214c:	a0 70       	andi	r26, 0x00	; 0
    214e:	b0 70       	andi	r27, 0x00	; 0
    2150:	80 34       	cpi	r24, 0x40	; 64
    2152:	91 05       	cpc	r25, r1
    2154:	a1 05       	cpc	r26, r1
    2156:	b1 05       	cpc	r27, r1
    2158:	39 f4       	brne	.+14     	; 0x2168 <__pack_f+0xee>
    215a:	27 ff       	sbrs	r18, 7
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <__pack_f+0xf6>
    215e:	20 5c       	subi	r18, 0xC0	; 192
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	4f 4f       	sbci	r20, 0xFF	; 255
    2164:	5f 4f       	sbci	r21, 0xFF	; 255
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <__pack_f+0xf6>
    2168:	21 5c       	subi	r18, 0xC1	; 193
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	4f 4f       	sbci	r20, 0xFF	; 255
    216e:	5f 4f       	sbci	r21, 0xFF	; 255
    2170:	e0 e0       	ldi	r30, 0x00	; 0
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	20 30       	cpi	r18, 0x00	; 0
    2176:	a0 e0       	ldi	r26, 0x00	; 0
    2178:	3a 07       	cpc	r19, r26
    217a:	a0 e0       	ldi	r26, 0x00	; 0
    217c:	4a 07       	cpc	r20, r26
    217e:	a0 e4       	ldi	r26, 0x40	; 64
    2180:	5a 07       	cpc	r21, r26
    2182:	10 f0       	brcs	.+4      	; 0x2188 <__pack_f+0x10e>
    2184:	e1 e0       	ldi	r30, 0x01	; 1
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	79 01       	movw	r14, r18
    218a:	8a 01       	movw	r16, r20
    218c:	27 c0       	rjmp	.+78     	; 0x21dc <__pack_f+0x162>
    218e:	60 38       	cpi	r22, 0x80	; 128
    2190:	71 05       	cpc	r23, r1
    2192:	64 f5       	brge	.+88     	; 0x21ec <__pack_f+0x172>
    2194:	fb 01       	movw	r30, r22
    2196:	e1 58       	subi	r30, 0x81	; 129
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	d8 01       	movw	r26, r16
    219c:	c7 01       	movw	r24, r14
    219e:	8f 77       	andi	r24, 0x7F	; 127
    21a0:	90 70       	andi	r25, 0x00	; 0
    21a2:	a0 70       	andi	r26, 0x00	; 0
    21a4:	b0 70       	andi	r27, 0x00	; 0
    21a6:	80 34       	cpi	r24, 0x40	; 64
    21a8:	91 05       	cpc	r25, r1
    21aa:	a1 05       	cpc	r26, r1
    21ac:	b1 05       	cpc	r27, r1
    21ae:	39 f4       	brne	.+14     	; 0x21be <__pack_f+0x144>
    21b0:	e7 fe       	sbrs	r14, 7
    21b2:	0d c0       	rjmp	.+26     	; 0x21ce <__pack_f+0x154>
    21b4:	80 e4       	ldi	r24, 0x40	; 64
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <__pack_f+0x14c>
    21be:	8f e3       	ldi	r24, 0x3F	; 63
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e0       	ldi	r26, 0x00	; 0
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 0e       	add	r14, r24
    21c8:	f9 1e       	adc	r15, r25
    21ca:	0a 1f       	adc	r16, r26
    21cc:	1b 1f       	adc	r17, r27
    21ce:	17 ff       	sbrs	r17, 7
    21d0:	05 c0       	rjmp	.+10     	; 0x21dc <__pack_f+0x162>
    21d2:	16 95       	lsr	r17
    21d4:	07 95       	ror	r16
    21d6:	f7 94       	ror	r15
    21d8:	e7 94       	ror	r14
    21da:	31 96       	adiw	r30, 0x01	; 1
    21dc:	87 e0       	ldi	r24, 0x07	; 7
    21de:	16 95       	lsr	r17
    21e0:	07 95       	ror	r16
    21e2:	f7 94       	ror	r15
    21e4:	e7 94       	ror	r14
    21e6:	8a 95       	dec	r24
    21e8:	d1 f7       	brne	.-12     	; 0x21de <__pack_f+0x164>
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <__pack_f+0x17c>
    21ec:	ee 24       	eor	r14, r14
    21ee:	ff 24       	eor	r15, r15
    21f0:	87 01       	movw	r16, r14
    21f2:	ef ef       	ldi	r30, 0xFF	; 255
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	6e 2f       	mov	r22, r30
    21f8:	67 95       	ror	r22
    21fa:	66 27       	eor	r22, r22
    21fc:	67 95       	ror	r22
    21fe:	90 2f       	mov	r25, r16
    2200:	9f 77       	andi	r25, 0x7F	; 127
    2202:	d7 94       	ror	r13
    2204:	dd 24       	eor	r13, r13
    2206:	d7 94       	ror	r13
    2208:	8e 2f       	mov	r24, r30
    220a:	86 95       	lsr	r24
    220c:	49 2f       	mov	r20, r25
    220e:	46 2b       	or	r20, r22
    2210:	58 2f       	mov	r21, r24
    2212:	5d 29       	or	r21, r13
    2214:	b7 01       	movw	r22, r14
    2216:	ca 01       	movw	r24, r20
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	08 95       	ret

00002224 <__unpack_f>:
    2224:	fc 01       	movw	r30, r24
    2226:	db 01       	movw	r26, r22
    2228:	40 81       	ld	r20, Z
    222a:	51 81       	ldd	r21, Z+1	; 0x01
    222c:	22 81       	ldd	r18, Z+2	; 0x02
    222e:	62 2f       	mov	r22, r18
    2230:	6f 77       	andi	r22, 0x7F	; 127
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	22 1f       	adc	r18, r18
    2236:	22 27       	eor	r18, r18
    2238:	22 1f       	adc	r18, r18
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	89 2f       	mov	r24, r25
    223e:	88 0f       	add	r24, r24
    2240:	82 2b       	or	r24, r18
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	99 1f       	adc	r25, r25
    2248:	99 27       	eor	r25, r25
    224a:	99 1f       	adc	r25, r25
    224c:	11 96       	adiw	r26, 0x01	; 1
    224e:	9c 93       	st	X, r25
    2250:	11 97       	sbiw	r26, 0x01	; 1
    2252:	21 15       	cp	r18, r1
    2254:	31 05       	cpc	r19, r1
    2256:	a9 f5       	brne	.+106    	; 0x22c2 <__unpack_f+0x9e>
    2258:	41 15       	cp	r20, r1
    225a:	51 05       	cpc	r21, r1
    225c:	61 05       	cpc	r22, r1
    225e:	71 05       	cpc	r23, r1
    2260:	11 f4       	brne	.+4      	; 0x2266 <__unpack_f+0x42>
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	37 c0       	rjmp	.+110    	; 0x22d4 <__unpack_f+0xb0>
    2266:	82 e8       	ldi	r24, 0x82	; 130
    2268:	9f ef       	ldi	r25, 0xFF	; 255
    226a:	13 96       	adiw	r26, 0x03	; 3
    226c:	9c 93       	st	X, r25
    226e:	8e 93       	st	-X, r24
    2270:	12 97       	sbiw	r26, 0x02	; 2
    2272:	9a 01       	movw	r18, r20
    2274:	ab 01       	movw	r20, r22
    2276:	67 e0       	ldi	r22, 0x07	; 7
    2278:	22 0f       	add	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	44 1f       	adc	r20, r20
    227e:	55 1f       	adc	r21, r21
    2280:	6a 95       	dec	r22
    2282:	d1 f7       	brne	.-12     	; 0x2278 <__unpack_f+0x54>
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	8c 93       	st	X, r24
    2288:	0d c0       	rjmp	.+26     	; 0x22a4 <__unpack_f+0x80>
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	44 1f       	adc	r20, r20
    2290:	55 1f       	adc	r21, r21
    2292:	12 96       	adiw	r26, 0x02	; 2
    2294:	8d 91       	ld	r24, X+
    2296:	9c 91       	ld	r25, X
    2298:	13 97       	sbiw	r26, 0x03	; 3
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	13 96       	adiw	r26, 0x03	; 3
    229e:	9c 93       	st	X, r25
    22a0:	8e 93       	st	-X, r24
    22a2:	12 97       	sbiw	r26, 0x02	; 2
    22a4:	20 30       	cpi	r18, 0x00	; 0
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	38 07       	cpc	r19, r24
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	48 07       	cpc	r20, r24
    22ae:	80 e4       	ldi	r24, 0x40	; 64
    22b0:	58 07       	cpc	r21, r24
    22b2:	58 f3       	brcs	.-42     	; 0x228a <__unpack_f+0x66>
    22b4:	14 96       	adiw	r26, 0x04	; 4
    22b6:	2d 93       	st	X+, r18
    22b8:	3d 93       	st	X+, r19
    22ba:	4d 93       	st	X+, r20
    22bc:	5c 93       	st	X, r21
    22be:	17 97       	sbiw	r26, 0x07	; 7
    22c0:	08 95       	ret
    22c2:	2f 3f       	cpi	r18, 0xFF	; 255
    22c4:	31 05       	cpc	r19, r1
    22c6:	79 f4       	brne	.+30     	; 0x22e6 <__unpack_f+0xc2>
    22c8:	41 15       	cp	r20, r1
    22ca:	51 05       	cpc	r21, r1
    22cc:	61 05       	cpc	r22, r1
    22ce:	71 05       	cpc	r23, r1
    22d0:	19 f4       	brne	.+6      	; 0x22d8 <__unpack_f+0xb4>
    22d2:	84 e0       	ldi	r24, 0x04	; 4
    22d4:	8c 93       	st	X, r24
    22d6:	08 95       	ret
    22d8:	64 ff       	sbrs	r22, 4
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <__unpack_f+0xbe>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	8c 93       	st	X, r24
    22e0:	12 c0       	rjmp	.+36     	; 0x2306 <__unpack_f+0xe2>
    22e2:	1c 92       	st	X, r1
    22e4:	10 c0       	rjmp	.+32     	; 0x2306 <__unpack_f+0xe2>
    22e6:	2f 57       	subi	r18, 0x7F	; 127
    22e8:	30 40       	sbci	r19, 0x00	; 0
    22ea:	13 96       	adiw	r26, 0x03	; 3
    22ec:	3c 93       	st	X, r19
    22ee:	2e 93       	st	-X, r18
    22f0:	12 97       	sbiw	r26, 0x02	; 2
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	8c 93       	st	X, r24
    22f6:	87 e0       	ldi	r24, 0x07	; 7
    22f8:	44 0f       	add	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	66 1f       	adc	r22, r22
    22fe:	77 1f       	adc	r23, r23
    2300:	8a 95       	dec	r24
    2302:	d1 f7       	brne	.-12     	; 0x22f8 <__unpack_f+0xd4>
    2304:	70 64       	ori	r23, 0x40	; 64
    2306:	14 96       	adiw	r26, 0x04	; 4
    2308:	4d 93       	st	X+, r20
    230a:	5d 93       	st	X+, r21
    230c:	6d 93       	st	X+, r22
    230e:	7c 93       	st	X, r23
    2310:	17 97       	sbiw	r26, 0x07	; 7
    2312:	08 95       	ret

00002314 <__fpcmp_parts_f>:
    2314:	1f 93       	push	r17
    2316:	dc 01       	movw	r26, r24
    2318:	fb 01       	movw	r30, r22
    231a:	9c 91       	ld	r25, X
    231c:	92 30       	cpi	r25, 0x02	; 2
    231e:	08 f4       	brcc	.+2      	; 0x2322 <__fpcmp_parts_f+0xe>
    2320:	47 c0       	rjmp	.+142    	; 0x23b0 <__fpcmp_parts_f+0x9c>
    2322:	80 81       	ld	r24, Z
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	08 f4       	brcc	.+2      	; 0x232a <__fpcmp_parts_f+0x16>
    2328:	43 c0       	rjmp	.+134    	; 0x23b0 <__fpcmp_parts_f+0x9c>
    232a:	94 30       	cpi	r25, 0x04	; 4
    232c:	51 f4       	brne	.+20     	; 0x2342 <__fpcmp_parts_f+0x2e>
    232e:	11 96       	adiw	r26, 0x01	; 1
    2330:	1c 91       	ld	r17, X
    2332:	84 30       	cpi	r24, 0x04	; 4
    2334:	99 f5       	brne	.+102    	; 0x239c <__fpcmp_parts_f+0x88>
    2336:	81 81       	ldd	r24, Z+1	; 0x01
    2338:	68 2f       	mov	r22, r24
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	61 1b       	sub	r22, r17
    233e:	71 09       	sbc	r23, r1
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <__fpcmp_parts_f+0xac>
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	21 f0       	breq	.+8      	; 0x234e <__fpcmp_parts_f+0x3a>
    2346:	92 30       	cpi	r25, 0x02	; 2
    2348:	31 f4       	brne	.+12     	; 0x2356 <__fpcmp_parts_f+0x42>
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	b9 f1       	breq	.+110    	; 0x23bc <__fpcmp_parts_f+0xa8>
    234e:	81 81       	ldd	r24, Z+1	; 0x01
    2350:	88 23       	and	r24, r24
    2352:	89 f1       	breq	.+98     	; 0x23b6 <__fpcmp_parts_f+0xa2>
    2354:	2d c0       	rjmp	.+90     	; 0x23b0 <__fpcmp_parts_f+0x9c>
    2356:	11 96       	adiw	r26, 0x01	; 1
    2358:	1c 91       	ld	r17, X
    235a:	11 97       	sbiw	r26, 0x01	; 1
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	f1 f0       	breq	.+60     	; 0x239c <__fpcmp_parts_f+0x88>
    2360:	81 81       	ldd	r24, Z+1	; 0x01
    2362:	18 17       	cp	r17, r24
    2364:	d9 f4       	brne	.+54     	; 0x239c <__fpcmp_parts_f+0x88>
    2366:	12 96       	adiw	r26, 0x02	; 2
    2368:	2d 91       	ld	r18, X+
    236a:	3c 91       	ld	r19, X
    236c:	13 97       	sbiw	r26, 0x03	; 3
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	82 17       	cp	r24, r18
    2374:	93 07       	cpc	r25, r19
    2376:	94 f0       	brlt	.+36     	; 0x239c <__fpcmp_parts_f+0x88>
    2378:	28 17       	cp	r18, r24
    237a:	39 07       	cpc	r19, r25
    237c:	bc f0       	brlt	.+46     	; 0x23ac <__fpcmp_parts_f+0x98>
    237e:	14 96       	adiw	r26, 0x04	; 4
    2380:	8d 91       	ld	r24, X+
    2382:	9d 91       	ld	r25, X+
    2384:	0d 90       	ld	r0, X+
    2386:	bc 91       	ld	r27, X
    2388:	a0 2d       	mov	r26, r0
    238a:	24 81       	ldd	r18, Z+4	; 0x04
    238c:	35 81       	ldd	r19, Z+5	; 0x05
    238e:	46 81       	ldd	r20, Z+6	; 0x06
    2390:	57 81       	ldd	r21, Z+7	; 0x07
    2392:	28 17       	cp	r18, r24
    2394:	39 07       	cpc	r19, r25
    2396:	4a 07       	cpc	r20, r26
    2398:	5b 07       	cpc	r21, r27
    239a:	18 f4       	brcc	.+6      	; 0x23a2 <__fpcmp_parts_f+0x8e>
    239c:	11 23       	and	r17, r17
    239e:	41 f0       	breq	.+16     	; 0x23b0 <__fpcmp_parts_f+0x9c>
    23a0:	0a c0       	rjmp	.+20     	; 0x23b6 <__fpcmp_parts_f+0xa2>
    23a2:	82 17       	cp	r24, r18
    23a4:	93 07       	cpc	r25, r19
    23a6:	a4 07       	cpc	r26, r20
    23a8:	b5 07       	cpc	r27, r21
    23aa:	40 f4       	brcc	.+16     	; 0x23bc <__fpcmp_parts_f+0xa8>
    23ac:	11 23       	and	r17, r17
    23ae:	19 f0       	breq	.+6      	; 0x23b6 <__fpcmp_parts_f+0xa2>
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <__fpcmp_parts_f+0xac>
    23b6:	6f ef       	ldi	r22, 0xFF	; 255
    23b8:	7f ef       	ldi	r23, 0xFF	; 255
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <__fpcmp_parts_f+0xac>
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	cb 01       	movw	r24, r22
    23c2:	1f 91       	pop	r17
    23c4:	08 95       	ret

000023c6 <__udivmodqi4>:
    23c6:	99 1b       	sub	r25, r25
    23c8:	79 e0       	ldi	r23, 0x09	; 9
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <__udivmodqi4_ep>

000023cc <__udivmodqi4_loop>:
    23cc:	99 1f       	adc	r25, r25
    23ce:	96 17       	cp	r25, r22
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <__udivmodqi4_ep>
    23d2:	96 1b       	sub	r25, r22

000023d4 <__udivmodqi4_ep>:
    23d4:	88 1f       	adc	r24, r24
    23d6:	7a 95       	dec	r23
    23d8:	c9 f7       	brne	.-14     	; 0x23cc <__udivmodqi4_loop>
    23da:	80 95       	com	r24
    23dc:	08 95       	ret

000023de <__udivmodhi4>:
    23de:	aa 1b       	sub	r26, r26
    23e0:	bb 1b       	sub	r27, r27
    23e2:	51 e1       	ldi	r21, 0x11	; 17
    23e4:	07 c0       	rjmp	.+14     	; 0x23f4 <__udivmodhi4_ep>

000023e6 <__udivmodhi4_loop>:
    23e6:	aa 1f       	adc	r26, r26
    23e8:	bb 1f       	adc	r27, r27
    23ea:	a6 17       	cp	r26, r22
    23ec:	b7 07       	cpc	r27, r23
    23ee:	10 f0       	brcs	.+4      	; 0x23f4 <__udivmodhi4_ep>
    23f0:	a6 1b       	sub	r26, r22
    23f2:	b7 0b       	sbc	r27, r23

000023f4 <__udivmodhi4_ep>:
    23f4:	88 1f       	adc	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	5a 95       	dec	r21
    23fa:	a9 f7       	brne	.-22     	; 0x23e6 <__udivmodhi4_loop>
    23fc:	80 95       	com	r24
    23fe:	90 95       	com	r25
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	08 95       	ret

00002406 <__divmodhi4>:
    2406:	97 fb       	bst	r25, 7
    2408:	09 2e       	mov	r0, r25
    240a:	07 26       	eor	r0, r23
    240c:	0a d0       	rcall	.+20     	; 0x2422 <__divmodhi4_neg1>
    240e:	77 fd       	sbrc	r23, 7
    2410:	04 d0       	rcall	.+8      	; 0x241a <__divmodhi4_neg2>
    2412:	e5 df       	rcall	.-54     	; 0x23de <__udivmodhi4>
    2414:	06 d0       	rcall	.+12     	; 0x2422 <__divmodhi4_neg1>
    2416:	00 20       	and	r0, r0
    2418:	1a f4       	brpl	.+6      	; 0x2420 <__divmodhi4_exit>

0000241a <__divmodhi4_neg2>:
    241a:	70 95       	com	r23
    241c:	61 95       	neg	r22
    241e:	7f 4f       	sbci	r23, 0xFF	; 255

00002420 <__divmodhi4_exit>:
    2420:	08 95       	ret

00002422 <__divmodhi4_neg1>:
    2422:	f6 f7       	brtc	.-4      	; 0x2420 <__divmodhi4_exit>
    2424:	90 95       	com	r25
    2426:	81 95       	neg	r24
    2428:	9f 4f       	sbci	r25, 0xFF	; 255
    242a:	08 95       	ret

0000242c <__divmodsi4>:
    242c:	97 fb       	bst	r25, 7
    242e:	09 2e       	mov	r0, r25
    2430:	05 26       	eor	r0, r21
    2432:	0e d0       	rcall	.+28     	; 0x2450 <__divmodsi4_neg1>
    2434:	57 fd       	sbrc	r21, 7
    2436:	04 d0       	rcall	.+8      	; 0x2440 <__divmodsi4_neg2>
    2438:	14 d0       	rcall	.+40     	; 0x2462 <__udivmodsi4>
    243a:	0a d0       	rcall	.+20     	; 0x2450 <__divmodsi4_neg1>
    243c:	00 1c       	adc	r0, r0
    243e:	38 f4       	brcc	.+14     	; 0x244e <__divmodsi4_exit>

00002440 <__divmodsi4_neg2>:
    2440:	50 95       	com	r21
    2442:	40 95       	com	r20
    2444:	30 95       	com	r19
    2446:	21 95       	neg	r18
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	4f 4f       	sbci	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255

0000244e <__divmodsi4_exit>:
    244e:	08 95       	ret

00002450 <__divmodsi4_neg1>:
    2450:	f6 f7       	brtc	.-4      	; 0x244e <__divmodsi4_exit>
    2452:	90 95       	com	r25
    2454:	80 95       	com	r24
    2456:	70 95       	com	r23
    2458:	61 95       	neg	r22
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	8f 4f       	sbci	r24, 0xFF	; 255
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	08 95       	ret

00002462 <__udivmodsi4>:
    2462:	a1 e2       	ldi	r26, 0x21	; 33
    2464:	1a 2e       	mov	r1, r26
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	fd 01       	movw	r30, r26
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <__udivmodsi4_ep>

0000246e <__udivmodsi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	ee 1f       	adc	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	a2 17       	cp	r26, r18
    2478:	b3 07       	cpc	r27, r19
    247a:	e4 07       	cpc	r30, r20
    247c:	f5 07       	cpc	r31, r21
    247e:	20 f0       	brcs	.+8      	; 0x2488 <__udivmodsi4_ep>
    2480:	a2 1b       	sub	r26, r18
    2482:	b3 0b       	sbc	r27, r19
    2484:	e4 0b       	sbc	r30, r20
    2486:	f5 0b       	sbc	r31, r21

00002488 <__udivmodsi4_ep>:
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	1a 94       	dec	r1
    2492:	69 f7       	brne	.-38     	; 0x246e <__udivmodsi4_loop>
    2494:	60 95       	com	r22
    2496:	70 95       	com	r23
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	bd 01       	movw	r22, r26
    24a2:	cf 01       	movw	r24, r30
    24a4:	08 95       	ret

000024a6 <__prologue_saves__>:
    24a6:	2f 92       	push	r2
    24a8:	3f 92       	push	r3
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ca 1b       	sub	r28, r26
    24d0:	db 0b       	sbc	r29, r27
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	ed 01       	movw	r28, r26
    2512:	08 95       	ret

00002514 <_exit>:
    2514:	f8 94       	cli

00002516 <__stop_program>:
    2516:	ff cf       	rjmp	.-2      	; 0x2516 <__stop_program>
